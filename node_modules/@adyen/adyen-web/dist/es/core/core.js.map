{"version":3,"file":"core.js","sources":["../../../src/core/core.ts"],"sourcesContent":["import Language from '../language';\nimport UIElement from '../components/internal/UIElement/UIElement';\nimport RiskModule from './RiskModule';\nimport PaymentMethods from './ProcessResponse/PaymentMethods';\nimport getComponentForAction from './ProcessResponse/PaymentAction';\nimport Analytics from './Analytics';\nimport { assertConfigurationPropertiesAreValid, processGlobalOptions } from './utils';\nimport Session from './CheckoutSession';\nimport { hasOwnProperty } from '../utils/hasOwnProperty';\nimport { Resources } from './Context/Resources';\nimport { SRPanel } from './Errors/SRPanel';\nimport registry, { NewableComponent } from './core.registry';\nimport { cleanupFinalResult, sanitizeResponse, verifyPaymentDidNotFail } from '../components/internal/UIElement/utils';\nimport AdyenCheckoutError, { IMPLEMENTATION_ERROR } from './Errors/AdyenCheckoutError';\nimport { ANALYTICS_ACTION_STR } from './Analytics/constants';\nimport { THREEDS2_FULL } from '../components/ThreeDS2/constants';\nimport { DEFAULT_LOCALE } from '../language/constants';\nimport getTranslations from './Services/get-translations';\nimport { defaultProps } from './core.defaultProps';\nimport { formatCustomTranslations, formatLocale } from '../language/utils';\nimport { resolveEnvironments } from './Environment';\n\nimport type { AnalyticsModule, PaymentAction, PaymentResponseData } from '../types/global-types';\nimport type { CoreConfiguration, ICore, AdditionalDetailsData } from './types';\nimport type { Translations } from '../language/types';\nimport type { UIElementProps } from '../components/internal/UIElement/types';\n\nclass Core implements ICore {\n    public session?: Session;\n    public paymentMethodsResponse: PaymentMethods;\n    public modules: Readonly<{\n        risk: RiskModule;\n        analytics: AnalyticsModule;\n        resources: Resources;\n        i18n: Language;\n        srPanel: SRPanel;\n    }>;\n    public options: CoreConfiguration;\n\n    public analyticsContext: string;\n    public loadingContext: string;\n    public cdnImagesUrl: string;\n    public cdnTranslationsUrl: string;\n\n    private components: UIElement[] = [];\n\n    public static readonly metadata = {\n        version: process.env.VERSION,\n        bundleType: process.env.BUNDLE_TYPE\n    };\n\n    public static registry = registry;\n\n    public static setBundleType(type: string): void {\n        Core.metadata.bundleType = type;\n    }\n\n    public static register(...items: NewableComponent[]) {\n        registry.add(...items);\n    }\n\n    /**\n     * Used internally by the PaymentMethod components to auto-register themselves\n     * @internal\n     */\n    public register(...items: NewableComponent[]) {\n        registry.add(...items);\n    }\n\n    public getComponent(txVariant: string) {\n        return registry.getComponent(txVariant);\n    }\n\n    constructor(props: CoreConfiguration) {\n        assertConfigurationPropertiesAreValid(props);\n\n        this.createFromAction = this.createFromAction.bind(this);\n\n        this.setOptions({ ...defaultProps, ...props });\n\n        const { apiUrl, analyticsUrl, cdnImagesUrl, cdnTranslationsUrl } = resolveEnvironments(\n            this.options.environment,\n            this.options._environmentUrls\n        );\n\n        this.loadingContext = apiUrl;\n        this.analyticsContext = analyticsUrl;\n        this.cdnImagesUrl = cdnImagesUrl;\n        this.cdnTranslationsUrl = cdnTranslationsUrl;\n\n        this.session = this.options.session && new Session(this.options.session, this.options.clientKey, this.loadingContext);\n\n        const clientKeyType = this.options.clientKey?.substring(0, 4);\n        if ((clientKeyType === 'test' || clientKeyType === 'live') && !this.loadingContext.includes(clientKeyType)) {\n            throw new AdyenCheckoutError(\n                'IMPLEMENTATION_ERROR',\n                `Error: you are using a ${clientKeyType} clientKey against the ${this.options._environmentUrls?.api || this.options.environment} environment`\n            );\n        }\n        if (clientKeyType === 'pub.') {\n            console.debug(\n                `The value you are passing as your \"clientKey\" looks like an originKey (${this.options.clientKey?.substring(0, 12)}..). Although this is supported it is not the recommended way to integrate. To generate a clientKey, see the documentation (https://docs.adyen.com/development-resources/client-side-authentication/migrate-from-origin-key-to-client-key/) for more details.`\n            );\n        }\n\n        if (this.options.exposeLibraryMetadata) {\n            window['AdyenWebMetadata'] = Core.metadata;\n        }\n    }\n\n    public async initialize(): Promise<this> {\n        await this.initializeCore();\n        this.validateCoreConfiguration();\n        await this.createCoreModules();\n        return this;\n    }\n\n    private async initializeCore(): Promise<this> {\n        if (this.session) {\n            return this.session\n                .setupSession(this.options)\n                .then(sessionResponse => {\n                    const { amount, shopperLocale, countryCode, paymentMethods, ...rest } = sessionResponse;\n\n                    this.setOptions({\n                        ...rest,\n                        amount: this.options.order ? this.options.order.remainingAmount : amount,\n                        locale: this.options.locale || shopperLocale,\n                        countryCode: this.options.countryCode || countryCode\n                    });\n\n                    this.createPaymentMethodsList(paymentMethods);\n\n                    return this;\n                })\n                .catch(error => {\n                    if (this.options.onError) this.options.onError(error);\n                    return Promise.reject(error);\n                });\n        }\n\n        this.createPaymentMethodsList();\n        return Promise.resolve(this);\n    }\n\n    private async fetchLocaleTranslations(): Promise<Translations> {\n        try {\n            return await getTranslations(this.cdnTranslationsUrl, Core.metadata.version, this.options.locale);\n        } catch (error: unknown) {\n            if (error instanceof AdyenCheckoutError) this.options.onError?.(error);\n            else this.options.onError?.(new AdyenCheckoutError('ERROR', 'Failed to fetch translation', { cause: error }));\n        }\n    }\n\n    private validateCoreConfiguration(): void {\n        // @ts-ignore This property does not exist, although merchants might be using when migrating from v5 to v6\n        if (this.options.paymentMethodsConfiguration) {\n            console.warn('WARNING:  \"paymentMethodsConfiguration\" is supported only by Drop-in.');\n        }\n\n        if (!this.options.countryCode) {\n            throw new AdyenCheckoutError(IMPLEMENTATION_ERROR, 'You must specify a countryCode when initializing checkout.');\n        }\n\n        if (!this.options.locale) {\n            this.setOptions({ locale: DEFAULT_LOCALE });\n        }\n\n        this.options.locale = formatLocale(this.options.locale);\n        this.options.translations = formatCustomTranslations(this.options.translations);\n    }\n\n    /**\n     * Method used when handling redirects. It submits details using 'onAdditionalDetails' or the Sessions flow if available.\n     *\n     * @public\n     * @see {https://docs.adyen.com/online-payments/build-your-integration/?platform=Web&integration=Components&version=5.55.1#handle-the-redirect}\n     * @param details - Details object containing the redirectResult\n     */\n    public submitDetails(details: AdditionalDetailsData['data']): void {\n        let promise = null;\n\n        if (this.options.onAdditionalDetails) {\n            promise = new Promise((resolve, reject) => {\n                this.options.onAdditionalDetails({ data: details }, undefined, { resolve, reject });\n            });\n        }\n\n        if (this.session) {\n            promise = this.session.submitDetails(details).catch(error => {\n                this.options.onError?.(error);\n                return Promise.reject(error);\n            });\n        }\n\n        if (!promise) {\n            this.options.onError?.(\n                new AdyenCheckoutError(\n                    'IMPLEMENTATION_ERROR',\n                    'It can not submit the details. The callback \"onAdditionalDetails\" or the Session is not setup correctly.'\n                )\n            );\n            return;\n        }\n\n        promise\n            .then(sanitizeResponse)\n            .then(verifyPaymentDidNotFail)\n            .then((response: PaymentResponseData) => {\n                cleanupFinalResult(response);\n                this.options.onPaymentCompleted?.(response);\n            })\n            .catch((response: PaymentResponseData) => {\n                cleanupFinalResult(response);\n                this.options.onPaymentFailed?.(response);\n            });\n    }\n\n    /**\n     * Instantiates a new element component ready to be mounted from an action object\n     *\n     * @param action - action defining the component with the component data\n     * @param options - options that will be merged to the global Checkout props\n     * @returns new UIElement\n     */\n    public createFromAction(action: PaymentAction, options = {}): UIElement {\n        if (!action || !action.type) {\n            if (hasOwnProperty(action, 'action') && hasOwnProperty(action, 'resultCode')) {\n                throw new Error(\n                    'createFromAction::Invalid Action - the passed action object itself has an \"action\" property and ' +\n                        'a \"resultCode\": have you passed in the whole response object by mistake?'\n                );\n            }\n            throw new Error('createFromAction::Invalid Action - the passed action object does not have a \"type\" property');\n        }\n\n        if (action.type) {\n            // 'threeDS2' OR 'qrCode', 'voucher', 'redirect', 'await', 'bankTransfer`\n            const component = action.type === THREEDS2_FULL ? `${action.type}${action.subtype}` : action.paymentMethodType;\n\n            this.modules.analytics.sendAnalytics(component, {\n                type: ANALYTICS_ACTION_STR,\n                subtype: action.type,\n                message: `${component} action was handled by the SDK`\n            });\n\n            const props = {\n                ...this.getCorePropsForComponent(),\n                ...options\n            };\n\n            return getComponentForAction(this, registry, action, props);\n        }\n\n        return this.handleCreateError();\n    }\n\n    /**\n     * Updates global configurations, resets the internal state and remounts each element.\n     *\n     * @param options - props to update\n     * @returns this - the element instance\n     */\n    public update = (options: Partial<CoreConfiguration> = {}): Promise<this> => {\n        this.setOptions(options);\n\n        return this.initialize().then(() => {\n            this.components.forEach(component => {\n                // We update only with the new options that have been received\n                const newProps: Partial<UIElementProps> = {\n                    ...options,\n                    ...(this.session && { session: this.session })\n                };\n                component.update(newProps);\n            });\n            return this;\n        });\n    };\n\n    /**\n     * Remove the reference of a component\n     * @param component - reference to the component to be removed\n     * @returns this - the element instance\n     * // TODO: Do we need this?\n     */\n    public remove = (component): this => {\n        this.components = this.components.filter(c => c._id !== component._id);\n        component.unmount();\n\n        return this;\n    };\n\n    /**\n     * @internal\n     * Create or update the config object passed when AdyenCheckout is initialised (environment, clientKey, etc...)\n     */\n    private setOptions = (options: CoreConfiguration): void => {\n        this.options = {\n            ...this.options,\n            ...options,\n            locale: options?.locale || this.options?.locale\n        };\n    };\n\n    /**\n     * @internal\n     * @returns props for a new UIElement\n     */\n    public getCorePropsForComponent(): any {\n        const globalOptions = processGlobalOptions(this.options);\n\n        return {\n            ...globalOptions,\n            core: this,\n            i18n: this.modules.i18n,\n            modules: this.modules,\n            session: this.session,\n            loadingContext: this.loadingContext,\n            cdnContext: this.cdnImagesUrl,\n            createFromAction: this.createFromAction\n        };\n    }\n\n    public storeElementReference(element: UIElement) {\n        if (element) {\n            this.components.push(element);\n        }\n    }\n\n    /**\n     * @internal\n     */\n    private handleCreateError(paymentMethod?): never {\n        const paymentMethodName = paymentMethod?.name ?? 'The passed payment method';\n        const errorMessage = paymentMethod\n            ? `${paymentMethodName} is not a valid Checkout Component. What was passed as a txVariant was: ${JSON.stringify(\n                  paymentMethod\n              )}. Check if this payment method is configured in the Backoffice or if the txVariant is a valid one`\n            : 'No Payment Method component was passed';\n\n        throw new Error(errorMessage);\n    }\n\n    private createPaymentMethodsList(paymentMethodsResponse?: PaymentMethods): void {\n        this.paymentMethodsResponse = new PaymentMethods(this.options.paymentMethodsResponse || paymentMethodsResponse, this.options);\n    }\n\n    private async createCoreModules(): Promise<void> {\n        if (this.modules) {\n            if (process.env.NODE_ENV === 'development') {\n                console.warn('Core: Core modules are already created.');\n            }\n            return;\n        }\n\n        const translations = await this.fetchLocaleTranslations();\n\n        this.modules = Object.freeze({\n            risk: new RiskModule(this, { ...this.options, loadingContext: this.loadingContext }),\n            analytics: Analytics({\n                loadingContext: this.loadingContext,\n                analyticsContext: this.analyticsContext,\n                clientKey: this.options.clientKey,\n                locale: this.options.locale,\n                analytics: this.options.analytics,\n                amount: this.options.amount,\n                bundleType: Core.metadata.bundleType\n            }),\n            resources: new Resources(this.cdnImagesUrl),\n            i18n: new Language({\n                locale: this.options.locale,\n                translations,\n                customTranslations: this.options.translations\n            }),\n            srPanel: new SRPanel(this, { ...this.options.srConfig })\n        });\n    }\n}\n\nexport default Core;\n"],"names":["Core","setBundleType","type","metadata","bundleType","register","items","registry","add","getComponent","txVariant","initialize","this","initializeCore","validateCoreConfiguration","createCoreModules","session","setupSession","options","then","sessionResponse","amount","shopperLocale","countryCode","paymentMethods","rest","setOptions","order","remainingAmount","locale","createPaymentMethodsList","catch","error","onError","Promise","reject","resolve","fetchLocaleTranslations","getTranslations","cdnTranslationsUrl","version","AdyenCheckoutError","cause","paymentMethodsConfiguration","console","warn","IMPLEMENTATION_ERROR","DEFAULT_LOCALE","formatLocale","translations","formatCustomTranslations","submitDetails","details","promise","onAdditionalDetails","data","undefined","sanitizeResponse","verifyPaymentDidNotFail","response","cleanupFinalResult","onPaymentCompleted","onPaymentFailed","createFromAction","action","hasOwnProperty","Error","component","THREEDS2_FULL","subtype","paymentMethodType","modules","analytics","sendAnalytics","ANALYTICS_ACTION_STR","message","props","getCorePropsForComponent","getComponentForAction","handleCreateError","processGlobalOptions","core","i18n","loadingContext","cdnContext","cdnImagesUrl","storeElementReference","element","components","push","paymentMethod","errorMessage","name","JSON","stringify","paymentMethodsResponse","PaymentMethods","Object","freeze","risk","RiskModule","Analytics","analyticsContext","clientKey","resources","Resources","Language","customTranslations","srPanel","SRPanel","srConfig","constructor","_define_property","update","forEach","newProps","remove","filter","c","_id","unmount","assertConfigurationPropertiesAreValid","bind","defaultProps","apiUrl","analyticsUrl","resolveEnvironments","environment","_environmentUrls","Session","clientKeyType","substring","includes","api","debug","exposeLibraryMetadata","window"],"mappings":"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"}