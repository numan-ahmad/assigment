{"version":3,"file":"utils.js","sources":["../../../../src/core/Analytics/utils.ts"],"sourcesContent":["import { AnalyticsObject, CreateAnalyticsObject, CardConfigData, AnalyticsData } from './types';\nimport { ANALYTICS_ACTION_STR, ANALYTICS_VALIDATION_ERROR_STR, errorCodeMapping, ALLOWED_ANALYTICS_DATA } from './constants';\nimport uuid from '../../utils/uuid';\nimport { digitsOnlyFormatter } from '../../utils/Formatters/formatters';\nimport { ERROR_FIELD_REQUIRED, ERROR_INVALID_FORMAT_EXPECTS } from '../Errors/constants';\nimport { DEFAULT_CHALLENGE_WINDOW_SIZE, THREEDS2_FULL } from '../../components/ThreeDS2/constants';\nimport { CardConfiguration } from '../../components/Card/types';\nimport CardInputDefaultProps from '../../components/Card/components/CardInput/defaultProps';\nimport { DEFAULT_CARD_GROUP_TYPES } from '../../components/internal/SecuredFields/lib/constants';\nimport { notFalsy } from '../../utils/commonUtils';\n\nconst MAX_LENGTH = 128;\nexport const getUTCTimestamp = () => Date.now();\n\n/**\n * All objects for the /checkoutanalytics endpoint have base props:\n *  \"timestamp\" & \"component\"\n *\n * Error objects have, in addition to the base props:\n *  \"code\", \"errorType\" & \"message\"\n *\n * Log objects have, in addition to the base props:\n *  \"message\" & \"type\" &\n *    \"subtype\" (e.g. when an action is handled)\n *\n * Info objects have, in addition to the base props:\n *   \"type\" & \"target\" &\n *     \"isStoredPaymentMethod\" & \"brand\" (when a storedCard is \"selected\"), or,\n *     \"validationErrorCode\" & \"validationErrorMessage\" (when the event is describing a validation error)\n *\n *  All objects can also have a \"metadata\" object of key-value pairs\n */\nexport const createAnalyticsObject = (aObj: CreateAnalyticsObject): AnalyticsObject => ({\n    timestamp: String(getUTCTimestamp()),\n    component: aObj.component,\n    id: uuid(),\n    /** ERROR */\n    ...(aObj.event === 'error' && { code: aObj.code, errorType: aObj.errorType, message: aObj.message }), // error event\n    /** LOG */\n    ...(aObj.event === 'log' && { type: aObj.type, message: aObj.message }), // log event\n    ...(aObj.event === 'log' && (aObj.type === ANALYTICS_ACTION_STR || aObj.type === THREEDS2_FULL) && { subType: aObj.subtype }), // only added if we have a log event of Action type or ThreeDS2\n    ...(aObj.event === 'log' && aObj.type === THREEDS2_FULL && { result: aObj.result }), // only added if we have a log event of ThreeDS2 type\n    /** INFO */\n    ...(aObj.event === 'info' && { type: aObj.type, target: aObj.target }), // info event\n    ...(aObj.event === 'info' && aObj.issuer && { issuer: aObj.issuer }), // relates to issuerLists\n    ...(aObj.event === 'info' && { isExpress: aObj.isExpress, expressPage: aObj.expressPage }), // relates to Plugins & detecting Express PMs\n    ...(aObj.event === 'info' && aObj.isStoredPaymentMethod && { isStoredPaymentMethod: aObj.isStoredPaymentMethod, brand: aObj.brand }), // only added if we have an info event about a storedPM\n    ...(aObj.event === 'info' &&\n        aObj.type === ANALYTICS_VALIDATION_ERROR_STR && {\n            validationErrorCode: mapErrorCodesForAnalytics(aObj.validationErrorCode, aObj.target),\n            validationErrorMessage: aObj.validationErrorMessage\n        }), // only added if we have an info event describing a validation error\n    ...(aObj.configData && { configData: aObj.configData }),\n    /** All */\n    ...(aObj.metadata && { metadata: aObj.metadata })\n});\n\nconst mapErrorCodesForAnalytics = (errorCode: string, target: string) => {\n    // Some of the more generic error codes required combination with target to retrieve a specific code\n    if (errorCode === ERROR_FIELD_REQUIRED || errorCode === ERROR_INVALID_FORMAT_EXPECTS) {\n        return errorCodeMapping[`${errorCode}.${target}`] ?? errorCode;\n    }\n\n    let errCode = errorCodeMapping[errorCode] ?? errorCode;\n\n    // If errCode isn't now a number - then we just need to remove any non-digits\n    // since the correct error code is already contained within the string e.g. securedField related errors\n    if (isNaN(Number(errCode))) {\n        errCode = digitsOnlyFormatter(errCode);\n    }\n\n    return errCode;\n};\n\nexport const processAnalyticsData = (analyticsData: AnalyticsData): AnalyticsData => {\n    return Object.keys(analyticsData).reduce((acc, prop) => {\n        if (ALLOWED_ANALYTICS_DATA.includes(prop)) acc[prop] = analyticsData[prop];\n        return acc;\n    }, {});\n};\n\nexport const getCardConfigData = (cardProps: CardConfiguration): CardConfigData => {\n    // Extract props from cardProps - mostly setting a default value, if prop not found\n    const {\n        autoFocus,\n        billingAddressAllowedCountries,\n        billingAddressMode,\n        billingAddressRequired,\n        billingAddressRequiredFields,\n        brands = DEFAULT_CARD_GROUP_TYPES,\n        brandsConfiguration,\n        challengeWindowSize = DEFAULT_CHALLENGE_WINDOW_SIZE,\n        configuration,\n        countryCode,\n        data,\n        disclaimerMessage,\n        disableIOSArrowKeys,\n        doBinLookup,\n        enableStoreDetails,\n        exposeExpiryDate,\n        forceCompat,\n        hasHolderName,\n        hideCVC,\n        holderNameRequired,\n        installmentOptions,\n        keypadFix,\n        legacyInputMode,\n        maskSecurityCode,\n        minimumExpiryDate,\n        name, // = 'none',\n        placeholders,\n        positionHolderNameOnTop,\n        showBrandIcon,\n        showInstallmentAmounts,\n        showPayButton = false, // hard coded default\n        styles,\n        onAllValid,\n        onBinLookup,\n        onBinValue,\n        onBlur,\n        onBrand,\n        onConfigSuccess,\n        onEnterKeyPressed,\n        onFieldValid,\n        onFocus,\n        onLoad\n    } = cardProps;\n\n    const dataString = JSON.stringify(CardInputDefaultProps.data);\n\n    const srPanelEnabled = cardProps.modules?.srPanel?.enabled;\n    const srPanelMoveFocus = cardProps.modules?.srPanel?.moveFocus;\n\n    const riskEnabled = cardProps.modules?.risk?.enabled;\n\n    const billingAddressModeValue = cardProps.onAddressLookup ? 'lookup' : billingAddressMode;\n\n    let showKCPType: 'none' | 'auto' | 'atStart' = 'none';\n    if (configuration?.koreanAuthenticationRequired === true) {\n        showKCPType = countryCode?.toLowerCase() === 'kr' ? 'atStart' : 'auto';\n    }\n\n    // @ts-ignore commenting out props until endpoint is ready\n    const configData: CardConfigData = {\n        autoFocus,\n        ...(billingAddressAllowedCountries?.length > 0 && {\n            billingAddressAllowedCountries: billingAddressAllowedCountries.toString().substring(0, MAX_LENGTH)\n        }),\n        billingAddressMode: billingAddressModeValue,\n        billingAddressRequired,\n        billingAddressRequiredFields: billingAddressRequiredFields?.toString()?.substring(0, MAX_LENGTH),\n        // Probably just for development - in real life we wouldn't expect the number of supported brands to push the endpoint limit on 128 chars\n        brands: brands?.toString()?.substring(0, MAX_LENGTH),\n        challengeWindowSize,\n        disableIOSArrowKeys,\n        doBinLookup,\n        enableStoreDetails,\n        exposeExpiryDate,\n        forceCompat,\n        hasBrandsConfiguration: notFalsy(brandsConfiguration),\n        hasData: data && JSON.stringify(cardProps.data) !== dataString,\n        hasDisclaimerMessage: !!disclaimerMessage,\n        hasHolderName,\n        hasInstallmentOptions: notFalsy(installmentOptions),\n        hasPlaceholders: notFalsy(placeholders), // has merchant defined placeholders\n        hasStylesConfigured: notFalsy(styles),\n        hideCVC,\n        holderNameRequired,\n        keypadFix,\n        legacyInputMode,\n        maskSecurityCode,\n        minimumExpiryDate: !!minimumExpiryDate, // Potentially, in the future, we can send the actual string value\n        name,\n        positionHolderNameOnTop,\n        riskEnabled,\n        showBrandIcon,\n        showInstallmentAmounts: !!showInstallmentAmounts,\n        showKCPType,\n        showPayButton,\n        socialSecurityNumberMode: configuration?.socialSecurityNumberMode,\n        srPanelEnabled,\n        srPanelMoveFocus,\n        /** callbacks */\n        // We need to detect if the merchant themselves has defined these, not if we've set them as a default\n        hasOnAllValid: onAllValid !== CardInputDefaultProps.onAllValid,\n        hasOnBinValue: onBinValue !== CardInputDefaultProps.onBinValue,\n        hasOnBlur: onBlur !== CardInputDefaultProps.onBlur,\n        hasOnBrand: onBrand !== CardInputDefaultProps.onBrand,\n        hasOnConfigSuccess: onConfigSuccess !== CardInputDefaultProps.onConfigSuccess,\n        hasOnFieldValid: onFieldValid !== CardInputDefaultProps.onFieldValid,\n        hasOnFocus: onFocus !== CardInputDefaultProps.onFocus,\n        hasOnLoad: onLoad !== CardInputDefaultProps.onLoad,\n        // Card level props\n        hasOnBinLookup: !!onBinLookup,\n        hasOnEnterKeyPressed: !!onEnterKeyPressed\n    };\n\n    return configData;\n};\n"],"names":["getUTCTimestamp","Date","now","createAnalyticsObject","aObj","timestamp","String","component","id","uuid","event","code","errorType","message","type","ANALYTICS_ACTION_STR","THREEDS2_FULL","subType","subtype","result","target","issuer","isExpress","expressPage","isStoredPaymentMethod","brand","ANALYTICS_VALIDATION_ERROR_STR","validationErrorCode","mapErrorCodesForAnalytics","validationErrorMessage","configData","metadata","errorCode","ERROR_FIELD_REQUIRED","ERROR_INVALID_FORMAT_EXPECTS","errorCodeMapping","errCode","isNaN","Number","digitsOnlyFormatter","processAnalyticsData","analyticsData","Object","keys","reduce","acc","prop","ALLOWED_ANALYTICS_DATA","includes","getCardConfigData","cardProps","autoFocus","billingAddressAllowedCountries","billingAddressMode","billingAddressRequired","billingAddressRequiredFields","brands","DEFAULT_CARD_GROUP_TYPES","brandsConfiguration","challengeWindowSize","DEFAULT_CHALLENGE_WINDOW_SIZE","configuration","countryCode","data","disclaimerMessage","disableIOSArrowKeys","doBinLookup","enableStoreDetails","exposeExpiryDate","forceCompat","hasHolderName","hideCVC","holderNameRequired","installmentOptions","keypadFix","legacyInputMode","maskSecurityCode","minimumExpiryDate","name","placeholders","positionHolderNameOnTop","showBrandIcon","showInstallmentAmounts","showPayButton","styles","onAllValid","onBinLookup","onBinValue","onBlur","onBrand","onConfigSuccess","onEnterKeyPressed","onFieldValid","onFocus","onLoad","dataString","JSON","stringify","CardInputDefaultProps","srPanelEnabled","modules","srPanel","enabled","srPanelMoveFocus","moveFocus","riskEnabled","risk","billingAddressModeValue","onAddressLookup","showKCPType","koreanAuthenticationRequired","toLowerCase","length","toString","substring","hasBrandsConfiguration","notFalsy","hasData","hasDisclaimerMessage","hasInstallmentOptions","hasPlaceholders","hasStylesConfigured","socialSecurityNumberMode","hasOnAllValid","hasOnBinValue","hasOnBlur","hasOnBrand","hasOnConfigSuccess","hasOnFieldValid","hasOnFocus","hasOnLoad","hasOnBinLookup","hasOnEnterKeyPressed"],"mappings":"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"}