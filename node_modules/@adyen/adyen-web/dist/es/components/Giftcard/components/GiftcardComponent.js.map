{"version":3,"file":"GiftcardComponent.js","sources":["../../../../../src/components/Giftcard/components/GiftcardComponent.tsx"],"sourcesContent":["import { Component, FunctionComponent, h } from 'preact';\nimport SecuredFieldsProvider from '../../internal/SecuredFields/SFP/SecuredFieldsProvider';\nimport Alert from '../../internal/Alert';\nimport GiftcardResult from './GiftcardResult';\nimport { useCoreContext } from '../../../core/Context/CoreProvider';\nimport { PaymentAmount } from '../../../types/global-types';\nimport { GIFT_CARD } from '../../internal/SecuredFields/lib/constants';\nimport { GiftCardFields } from './GiftcardFields';\nimport { GiftcardFieldsProps, Placeholders } from './types';\n\ninterface GiftcardComponentProps {\n    onChange: (state) => void;\n    onFocus: (event) => void;\n    onBlur: (event) => void;\n    onSubmit: (event) => void;\n    onBalanceCheck: (event) => void;\n\n    amount?: PaymentAmount;\n    showPayButton: boolean;\n    payButton: (config) => any;\n\n    pinRequired: boolean;\n    expiryDateRequired?: boolean;\n    fieldsLayoutComponent: FunctionComponent<GiftcardFieldsProps>;\n    placeholders?: Placeholders;\n    handleKeyPress?: (o: KeyboardEvent) => void;\n}\n\nclass Giftcard extends Component<GiftcardComponentProps> {\n    public state = {\n        status: 'ready',\n        data: {},\n        balance: null,\n        transactionLimit: null,\n        focusedElement: false,\n        isValid: false\n    };\n\n    public static defaultProps = {\n        pinRequired: true,\n        expiryDateRequired: false,\n        onChange: () => {},\n        onFocus: () => {},\n        onBlur: () => {},\n        fieldsLayoutComponent: GiftCardFields\n    };\n\n    public sfp;\n\n    public onChange = sfpState => {\n        this.props.onChange({\n            data: sfpState.data,\n            isValid: sfpState.isSfpValid\n        });\n    };\n\n    public showValidation = () => {\n        this.sfp.showValidation();\n    };\n\n    setStatus(status) {\n        this.setState({ status });\n    }\n\n    public handleFocus = e => {\n        this.setState({ focusedElement: e.currentFocusObject });\n\n        const isFocused = e.focus === true;\n        if (isFocused) {\n            this.props.onFocus(e);\n        } else {\n            this.props.onBlur(e);\n        }\n    };\n\n    public setBalance = ({ balance, transactionLimit }) => {\n        this.setState({ balance, transactionLimit });\n    };\n\n    render(props, { focusedElement, balance, transactionLimit }) {\n        const { i18n } = useCoreContext();\n\n        const transactionAmount = transactionLimit?.value < balance?.value ? transactionLimit : balance;\n        const hasEnoughBalance = transactionAmount?.value >= this.props.amount?.value;\n\n        if (transactionAmount && hasEnoughBalance) {\n            return <GiftcardResult balance={balance} transactionLimit={transactionLimit} onSubmit={props.onSubmit} {...props} />;\n        }\n\n        const getCardErrorMessage = sfpState => {\n            if (sfpState.errors.encryptedCardNumber) return i18n.get(sfpState.errors.encryptedCardNumber);\n\n            switch (this.state.status) {\n                case 'no-balance':\n                    return i18n.get('error.giftcard.no-balance');\n                case 'card-error':\n                    return i18n.get('error.giftcard.card-error');\n                case 'currency-error':\n                    return i18n.get('error.giftcard.currency-error');\n                default:\n                    return null;\n            }\n        };\n\n        return (\n            <div className=\"adyen-checkout__giftcard\">\n                {this.state.status === 'error' && <Alert icon={'cross'}>{i18n.get('error.message.unknown')}</Alert>}\n\n                <SecuredFieldsProvider\n                    {...this.props}\n                    ref={ref => {\n                        this.sfp = ref;\n                    }}\n                    onChange={this.onChange}\n                    onFocus={this.handleFocus}\n                    type={GIFT_CARD}\n                    render={({ setRootNode, setFocusOn }, sfpState) =>\n                        this.props.fieldsLayoutComponent({\n                            i18n: i18n,\n                            pinRequired: this.props.pinRequired,\n                            focusedElement: focusedElement,\n                            getCardErrorMessage: getCardErrorMessage,\n                            setRootNode: setRootNode,\n                            setFocusOn: setFocusOn,\n                            sfpState: sfpState\n                        })\n                    }\n                />\n\n                {this.props.showPayButton &&\n                    this.props.payButton({\n                        status: this.state.status,\n                        onClick: this.props.onSubmit,\n                        label: i18n.get('applyGiftcard')\n                    })}\n            </div>\n        );\n    }\n}\n\nexport default Giftcard;\n"],"names":["Giftcard","Component","setStatus","status","this","setState","render","props","focusedElement","balance","transactionLimit","i18n","useCoreContext","transactionAmount","value","hasEnoughBalance","amount","h","GiftcardResult","onSubmit","getCardErrorMessage","sfpState","errors","encryptedCardNumber","get","state","div","className","Alert","icon","SecuredFieldsProvider","ref","sfp","onChange","onFocus","handleFocus","type","GIFT_CARD","setRootNode","setFocusOn","fieldsLayoutComponent","pinRequired","showPayButton","payButton","onClick","label","super","args","_define_property","data","isValid","isSfpValid","showValidation","e","currentFocusObject","focus","onBlur","setBalance","defaultProps","expiryDateRequired","GiftCardFields"],"mappings":"8iBA4BA,MAAMA,UAAiBC,EAgCnBC,SAAAA,CAAUC,GACNC,KAAKC,SAAS,CAAEF,UACpB,CAiBAG,MAAAA,CAAOC,GAAOC,eAAEA,EAAcC,QAAEA,EAAOC,iBAAEA,IACrC,MAAMC,KAAEA,GAASC,IAEXC,EAAoBH,GAAkBI,MAAQL,GAASK,MAAQJ,EAAmBD,EAClFM,EAAmBF,GAAmBC,OAASV,KAAKG,MAAMS,QAAQF,MAExE,GAAID,GAAqBE,EACrB,OAAOE,EAACC,EAAAA,CAAeT,QAASA,EAASC,iBAAkBA,EAAkBS,SAAUZ,EAAMY,YAAcZ,IAG/G,MAAMa,EAAsBC,IACxB,GAAIA,EAASC,OAAOC,oBAAqB,OAAOZ,EAAKa,IAAIH,EAASC,OAAOC,qBAEzE,OAAQnB,KAAKqB,MAAMtB,QACf,IAAK,aACD,OAAOQ,EAAKa,IAAI,6BACpB,IAAK,aACD,OAAOb,EAAKa,IAAI,6BACpB,IAAK,iBACD,OAAOb,EAAKa,IAAI,iCACpB,QACI,OAAO,KACf,EAGJ,OACIP,EAACS,MAAAA,CAAIC,UAAU,4BACY,UAAtBvB,KAAKqB,MAAMtB,QAAsBc,EAACW,EAAAA,CAAMC,KAAM,SAAUlB,EAAKa,IAAI,0BAElEP,EAACa,EAAAA,IACO1B,KAAKG,MACTwB,IAAKA,IACD3B,KAAK4B,IAAMD,CAAAA,EAEfE,SAAU7B,KAAK6B,SACfC,QAAS9B,KAAK+B,YACdC,KAAMC,EACN/B,OAAQ,EAAGgC,cAAaC,cAAclB,IAClCjB,KAAKG,MAAMiC,sBAAsB,CAC7B7B,KAAMA,EACN8B,YAAarC,KAAKG,MAAMkC,YACxBjC,eAAgBA,EAChBY,oBAAqBA,EACrBkB,YAAaA,EACbC,WAAYA,EACZlB,SAAUA,MAKrBjB,KAAKG,MAAMmC,eACRtC,KAAKG,MAAMoC,UAAU,CACjBxC,OAAQC,KAAKqB,MAAMtB,OACnByC,QAASxC,KAAKG,MAAMY,SACpB0B,MAAOlC,EAAKa,IAAI,mBAIpC,mBA5GAsB,SAAAC,GAAAC,EAAA5C,KAAOqB,QAAQ,CACXtB,OAAQ,QACR8C,KAAM,CAAC,EACPxC,QAAS,KACTC,iBAAkB,KAClBF,gBAAgB,EAChB0C,SAAS,IAYbF,OAAOhB,WAAP,GAEAgB,EAAA5C,KAAO6B,YAAWZ,IACdjB,KAAKG,MAAM0B,SAAS,CAChBgB,KAAM5B,EAAS4B,KACfC,QAAS7B,EAAS8B,YACtB,IAGJH,OAAOI,kBAAiB,KACpBhD,KAAK4B,IAAIoB,gBAAc,IAO3BJ,EAAA5C,KAAO+B,eAAckB,IACjBjD,KAAKC,SAAS,CAAEG,eAAgB6C,EAAEC,sBAEJ,IAAZD,EAAEE,MAEhBnD,KAAKG,MAAM2B,QAAQmB,GAEnBjD,KAAKG,MAAMiD,OAAOH,EACtB,IAGJL,OAAOS,cAAa,EAAGhD,UAASC,uBAC5BN,KAAKC,SAAS,CAAEI,UAASC,oBAAiB,KAtC9CsC,EAVEhD,EAUY0D,eAAe,CACzBjB,aAAa,EACbkB,oBAAoB,EACpB1B,SAAU,OACVC,QAAS,OACTsB,OAAQ,OACRhB,sBAAuBoB"}