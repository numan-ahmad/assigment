{"version":3,"file":"CustomCard.js","sources":["../../../../src/components/CustomCard/CustomCard.tsx"],"sourcesContent":["import { h } from 'preact';\nimport UIElement from '../internal/UIElement';\nimport CustomCardInput from './CustomCardInput';\nimport { CoreProvider } from '../../core/Context/CoreProvider';\nimport collectBrowserInfo from '../../utils/browserInfo';\nimport triggerBinLookUp from '../internal/SecuredFields/binLookup/triggerBinLookUp';\nimport { CbObjOnBinLookup, CbObjOnFocus } from '../internal/SecuredFields/lib/types';\nimport { BrandObject } from '../Card/types';\nimport { getCardImageUrl, fieldTypeToSnakeCase } from '../internal/SecuredFields/utils';\nimport { TxVariants } from '../tx-variants';\nimport { CustomCardConfiguration } from './types';\nimport { ANALYTICS_FOCUS_STR, ANALYTICS_UNFOCUS_STR } from '../../core/Analytics/constants';\nimport { SendAnalyticsObject } from '../../core/Analytics/types';\n\n// TODO questions about\n// brand - does a merchant ever make a custom stored card?\n// type\n// countryCode\n\nexport class CustomCard extends UIElement<CustomCardConfiguration> {\n    public static type = TxVariants.customCard;\n\n    public static analyticsType = 'custom-scheme';\n\n    protected static defaultProps = {\n        onBinLookup: () => {},\n        brandsConfiguration: {}\n    };\n\n    formatProps(props: CustomCardConfiguration) {\n        return {\n            ...props,\n            type: TxVariants.customCard,\n            brand: TxVariants.card\n        };\n    }\n\n    /**\n     * Formats the component data output\n     */\n    formatData() {\n        const sfBrand = this.state.selectedBrandValue;\n        return {\n            paymentMethod: {\n                type: 'scheme',\n                ...this.state.data,\n                ...(sfBrand && { brand: sfBrand })\n            },\n            browserInfo: this.browserInfo,\n            origin: !!window && window.location.origin\n        };\n    }\n\n    protected submitAnalytics(analyticsObj: SendAnalyticsObject) {\n        super.submitAnalytics(analyticsObj, this.props);\n    }\n\n    updateStyles(stylesObj) {\n        if (this.componentRef?.updateStyles) this.componentRef.updateStyles(stylesObj);\n        return this;\n    }\n\n    setFocusOn(frame) {\n        if (this.componentRef?.setFocusOn) this.componentRef.setFocusOn(frame);\n        return this;\n    }\n\n    processBinLookupResponse(binLookupResponse) {\n        if (this.componentRef?.processBinLookupResponse) this.componentRef.processBinLookupResponse(binLookupResponse);\n        return this;\n    }\n\n    dualBrandingChangeHandler(e: Event | string) {\n        if (this.componentRef?.dualBrandingChangeHandler) this.componentRef.dualBrandingChangeHandler(e);\n        return this;\n    }\n\n    handleUnsupportedCard(errObj) {\n        if (this.componentRef?.handleUnsupportedCard) this.componentRef.handleUnsupportedCard(errObj);\n        return this;\n    }\n\n    onBinLookup(obj: CbObjOnBinLookup) {\n        const nuObj = { ...obj };\n        nuObj.rootNode = this._node;\n\n        if (!nuObj.isReset) {\n            // Add brandImage urls, first checking if the merchant has configured their own one for the brand\n            nuObj.supportedBrandsRaw = obj.supportedBrandsRaw?.map((item: BrandObject) => {\n                item.brandImageUrl = this.props.brandsConfiguration[item.brand]?.icon ?? getCardImageUrl(item.brand, this.resources);\n                return item;\n            });\n        }\n\n        this.props.onBinLookup(nuObj);\n    }\n\n    public onBinValue = triggerBinLookUp(this);\n\n    get isValid() {\n        return !!this.state.isValid;\n    }\n\n    get browserInfo() {\n        return collectBrowserInfo();\n    }\n\n    private onFocus = (obj: CbObjOnFocus) => {\n        this.submitAnalytics({\n            type: obj.focus === true ? ANALYTICS_FOCUS_STR : ANALYTICS_UNFOCUS_STR,\n            target: fieldTypeToSnakeCase(obj.fieldType)\n        });\n\n        // Call merchant defined callback\n        this.props.onFocus?.(obj);\n    };\n\n    protected onEnterKeyPressed = (activeElement: Element, component: UIElement) => {\n        this.props.onEnterKeyPressed?.(activeElement, component);\n    };\n\n    render() {\n        return (\n            <CoreProvider i18n={this.props.i18n} loadingContext={this.props.loadingContext} resources={this.resources}>\n                <CustomCardInput\n                    ref={ref => {\n                        this.componentRef = ref;\n                    }}\n                    {...this.props}\n                    {...this.state}\n                    handleKeyPress={this.handleKeyPress}\n                    rootNode={this._node}\n                    onChange={this.setState}\n                    onBinValue={this.onBinValue}\n                    implementationType={'custom'}\n                    resources={this.resources}\n                    brand={this.props.brand}\n                    onFocus={this.onFocus}\n                />\n            </CoreProvider>\n        );\n    }\n}\n\nexport default CustomCard;\n"],"names":["CustomCard","UIElement","formatProps","props","type","TxVariants","customCard","brand","card","formatData","sfBrand","this","state","selectedBrandValue","paymentMethod","data","browserInfo","origin","window","location","submitAnalytics","analyticsObj","super","updateStyles","stylesObj","componentRef","setFocusOn","frame","processBinLookupResponse","binLookupResponse","dualBrandingChangeHandler","e","handleUnsupportedCard","errObj","onBinLookup","obj","nuObj","rootNode","_node","isReset","supportedBrandsRaw","map","item","brandImageUrl","brandsConfiguration","icon","getCardImageUrl","resources","isValid","collectBrowserInfo","render","h","CoreProvider","i18n","loadingContext","CustomCardInput","ref","handleKeyPress","onChange","setState","onBinValue","implementationType","onFocus","args","_define_property","triggerBinLookUp","focus","ANALYTICS_FOCUS_STR","ANALYTICS_UNFOCUS_STR","target","fieldTypeToSnakeCase","fieldType","onEnterKeyPressed","activeElement","component","analyticsType","defaultProps"],"mappings":"otBAmBO,MAAMA,UAAmBC,EAU5BC,WAAAA,CAAYC,GACR,MAAO,IACAA,EACHC,KAAMC,EAAWC,WACjBC,MAAOF,EAAWG,KAE1B,CAKAC,UAAAA,GACI,MAAMC,EAAUC,KAAKC,MAAMC,mBAC3B,MAAO,CACHC,cAAe,CACXV,KAAM,YACHO,KAAKC,MAAMG,QACVL,GAAW,CAAEH,MAAOG,IAE5BM,YAAaL,KAAKK,YAClBC,SAAUC,QAAUA,OAAOC,SAASF,OAE5C,CAEUG,eAAAA,CAAgBC,GACtBC,MAAMF,gBAAgBC,EAAcV,KAAKR,MAC7C,CAEAoB,YAAAA,CAAaC,GAET,OADIb,KAAKc,cAAcF,cAAcZ,KAAKc,aAAaF,aAAaC,GAC7Db,IACX,CAEAe,UAAAA,CAAWC,GAEP,OADIhB,KAAKc,cAAcC,YAAYf,KAAKc,aAAaC,WAAWC,GACzDhB,IACX,CAEAiB,wBAAAA,CAAyBC,GAErB,OADIlB,KAAKc,cAAcG,0BAA0BjB,KAAKc,aAAaG,yBAAyBC,GACrFlB,IACX,CAEAmB,yBAAAA,CAA0BC,GAEtB,OADIpB,KAAKc,cAAcK,2BAA2BnB,KAAKc,aAAaK,0BAA0BC,GACvFpB,IACX,CAEAqB,qBAAAA,CAAsBC,GAElB,OADItB,KAAKc,cAAcO,uBAAuBrB,KAAKc,aAAaO,sBAAsBC,GAC/EtB,IACX,CAEAuB,WAAAA,CAAYC,GACR,MAAMC,EAAQ,IAAKD,GACnBC,EAAMC,SAAW1B,KAAK2B,MAEjBF,EAAMG,UAEPH,EAAMI,mBAAqBL,EAAIK,oBAAoBC,KAAKC,IACpDA,EAAKC,cAAgBhC,KAAKR,MAAMyC,oBAAoBF,EAAKnC,QAAQsC,MAAQC,EAAgBJ,EAAKnC,MAAOI,KAAKoC,WACnGL,MAIf/B,KAAKR,MAAM+B,YAAYE,EAC3B,CAIA,WAAIY,GACA,QAASrC,KAAKC,MAAMoC,OACxB,CAEA,eAAIhC,GACA,OAAOiC,GACX,CAgBAC,MAAAA,GACI,OACIC,EAACC,EAAAA,CAAaC,KAAM1C,KAAKR,MAAMkD,KAAMC,eAAgB3C,KAAKR,MAAMmD,eAAgBP,UAAWpC,KAAKoC,WAC5FI,EAACI,EAAAA,CACGC,IAAKA,IACD7C,KAAKc,aAAe+B,CAAAA,KAEpB7C,KAAKR,SACLQ,KAAKC,MACT6C,eAAgB9C,KAAK8C,eACrBpB,SAAU1B,KAAK2B,MACfoB,SAAU/C,KAAKgD,SACfC,WAAYjD,KAAKiD,WACjBC,mBAAoB,SACpBd,UAAWpC,KAAKoC,UAChBxC,MAAOI,KAAKR,MAAMI,MAClBuD,QAASnD,KAAKmD,UAI9B,mBA5CAxC,SAAAyC,GAAAC,EAAArD,KAAOiD,aAAaK,EAAiBtD,OAUrCqD,EAAArD,KAAQmD,WAAW3B,IACfxB,KAAKS,gBAAgB,CACjBhB,MAAoB,IAAd+B,EAAI+B,MAAiBC,EAAsBC,EACjDC,OAAQC,EAAqBnC,EAAIoC,aAIrC5D,KAAKR,MAAM2D,UAAU3B,EAAAA,IAGzB6B,EAAArD,KAAU6D,qBAAoB,CAACC,EAAwBC,KACnD/D,KAAKR,MAAMqE,oBAAoBC,EAAeC,EAAAA,KAlGlDV,EADShE,EACKI,OAAOC,EAAWC,YAEhC0D,EAHShE,EAGK2E,gBAAgB,iBAE9BX,EALShE,EAKQ4E,eAAe,CAC5B1C,YAAa,OACbU,oBAAqB,CAAC"}