{"version":3,"file":"analyticsPreProcessor.js","sources":["../../../../src/core/Analytics/analyticsPreProcessor.ts"],"sourcesContent":["import { AnalyticsModule } from '../../types/global-types';\nimport { ConfigData, CreateAnalyticsEventObject, SendAnalyticsObject } from './types';\nimport {\n    ANALYTICS_ACTION_STR,\n    ANALYTICS_CONFIGURED_STR,\n    ANALYTICS_DISPLAYED_STR,\n    ANALYTICS_DOWNLOAD_STR,\n    ANALYTICS_FOCUS_STR,\n    ANALYTICS_INPUT_STR,\n    ANALYTICS_RENDERED_STR,\n    ANALYTICS_SELECTED_STR,\n    ANALYTICS_SUBMIT_STR,\n    ANALYTICS_UNFOCUS_STR,\n    ANALYTICS_VALIDATION_ERROR_STR,\n    ANALYTICS_EXPRESS_PAGES_ARRAY,\n    ANALYTICS_EVENT\n} from './constants';\nimport { THREEDS2_ERROR, THREEDS2_FULL } from '../../components/ThreeDS2/constants';\nimport AdyenCheckoutError, { SDK_ERROR } from '../Errors/AdyenCheckoutError';\nimport { getCardConfigData } from './utils';\n\nexport const analyticsPreProcessor = (analyticsModule: AnalyticsModule) => {\n    // return function with an analyticsModule reference\n    return (component: string, analyticsObj: SendAnalyticsObject, uiElementProps = {} as any) => {\n        const { type, target } = analyticsObj;\n\n        if (!type) {\n            throw new AdyenCheckoutError(SDK_ERROR, 'You are trying to create an analytics event without a type');\n        }\n\n        switch (type) {\n            /**\n             * INFO\n             */\n            // Called from BaseElement (when component mounted) or, from DropinComponent (after mounting, when it has finished resolving all the PM promises)\n            // &/or, from DropinComponent when a PM is selected\n            // Only Drop-in sends the configData directly, if it happens the configData from the component(drop-in atm) will take over the internal configData below.\n            case ANALYTICS_RENDERED_STR: {\n                const { isStoredPaymentMethod, brand, configData: originalConfigData } = analyticsObj;\n\n                // Expected from Wallet PMs\n                const { isExpress, expressPage } = uiElementProps;\n\n                const hasExpressPage = expressPage && ANALYTICS_EXPRESS_PAGES_ARRAY.includes(expressPage);\n\n                const { type: componentType } = uiElementProps;\n                let configData: ConfigData = null;\n\n                if (componentType === 'scheme' || componentType === 'bcmc' || componentType === 'customcard') {\n                    // Expected from Card related PMs\n                    configData = getCardConfigData(uiElementProps);\n                }\n\n                const data = {\n                    component,\n                    type,\n                    ...(typeof isStoredPaymentMethod === 'boolean' && { isStoredPaymentMethod }), // if defined and a boolean...\n                    ...(brand && { brand }),\n                    ...(typeof isExpress === 'boolean' && { isExpress }),\n                    ...(isExpress === true && hasExpressPage && { expressPage }), // We only care about the expressPage value if isExpress is true\n                    ...(configData && { configData }),\n                    ...(originalConfigData && { configData: originalConfigData })\n                };\n\n                analyticsModule.createAnalyticsEvent({\n                    event: ANALYTICS_EVENT.info,\n                    data\n                });\n\n                break;\n            }\n\n            case ANALYTICS_CONFIGURED_STR: {\n                const { isStoredPaymentMethod, brand } = analyticsObj;\n                const data = { component, type, isStoredPaymentMethod, brand };\n\n                analyticsModule.createAnalyticsEvent({\n                    event: ANALYTICS_EVENT.info,\n                    data\n                });\n                break;\n            }\n\n            case ANALYTICS_FOCUS_STR:\n            case ANALYTICS_UNFOCUS_STR:\n            case ANALYTICS_DISPLAYED_STR: // issuerList\n            case ANALYTICS_INPUT_STR: // issuerList\n            case ANALYTICS_DOWNLOAD_STR: // QR codes\n                analyticsModule.createAnalyticsEvent({\n                    event: ANALYTICS_EVENT.info,\n                    data: { component, type, target }\n                });\n                break;\n\n            // - ApplePay & GooglePay when instant PMs\n            // - issuerList buttons\n            case ANALYTICS_SELECTED_STR: {\n                const { issuer } = analyticsObj;\n                analyticsModule.createAnalyticsEvent({\n                    event: ANALYTICS_EVENT.info,\n                    data: { component, type, target, issuer }\n                });\n                break;\n            }\n\n            case ANALYTICS_VALIDATION_ERROR_STR: {\n                const { validationErrorCode, validationErrorMessage } = analyticsObj;\n                analyticsModule.createAnalyticsEvent({\n                    event: ANALYTICS_EVENT.info,\n                    data: { component, type, target, validationErrorCode, validationErrorMessage }\n                });\n                break;\n            }\n\n            /**\n             * LOGS\n             */\n            case ANALYTICS_SUBMIT_STR:\n                analyticsModule.createAnalyticsEvent({\n                    event: ANALYTICS_EVENT.log,\n                    data: { component, type, message: 'Shopper clicked pay' }\n                });\n                break;\n\n            case ANALYTICS_ACTION_STR: {\n                const { subtype, message } = analyticsObj;\n                analyticsModule.createAnalyticsEvent({\n                    event: ANALYTICS_EVENT.log,\n                    data: { component, type, subtype, message }\n                });\n                break;\n            }\n\n            // General 3DS2 log events: \"action handled\" (i.e. iframe loaded), data sent, process completed\n            case THREEDS2_FULL: {\n                const { message, metadata, subtype, result } = analyticsObj;\n\n                analyticsModule.createAnalyticsEvent({\n                    event: ANALYTICS_EVENT.log,\n                    data: { component, type, message, metadata, subtype, result }\n                });\n                break;\n            }\n\n            /**\n             * ERRORS\n             */\n            case THREEDS2_ERROR:\n            case ANALYTICS_EVENT.error: {\n                const { message, code, errorType } = analyticsObj;\n                analyticsModule.createAnalyticsEvent({\n                    event: ANALYTICS_EVENT.error,\n                    data: { component, type, message, code, errorType }\n                });\n                break;\n            }\n\n            default: {\n                analyticsModule.createAnalyticsEvent(analyticsObj as CreateAnalyticsEventObject);\n            }\n        }\n    };\n};\n"],"names":["analyticsPreProcessor","analyticsModule","component","analyticsObj","uiElementProps","type","target","AdyenCheckoutError","SDK_ERROR","ANALYTICS_RENDERED_STR","isStoredPaymentMethod","brand","configData","originalConfigData","isExpress","expressPage","hasExpressPage","ANALYTICS_EXPRESS_PAGES_ARRAY","includes","componentType","getCardConfigData","data","_object_spread","createAnalyticsEvent","event","ANALYTICS_EVENT","info","ANALYTICS_CONFIGURED_STR","ANALYTICS_FOCUS_STR","ANALYTICS_UNFOCUS_STR","ANALYTICS_DISPLAYED_STR","ANALYTICS_INPUT_STR","ANALYTICS_DOWNLOAD_STR","ANALYTICS_SELECTED_STR","issuer","ANALYTICS_VALIDATION_ERROR_STR","validationErrorCode","validationErrorMessage","ANALYTICS_SUBMIT_STR","log","message","ANALYTICS_ACTION_STR","subtype","THREEDS2_FULL","metadata","result","THREEDS2_ERROR","error","code","errorType"],"mappings":"ysBAqBO,MAAMA,EAAyBC,GAE3B,CAACC,EAAmBC,EAAmCC,EAAiB,CAAA,KAC3E,MAAMC,KAAEA,EAAIC,OAAEA,GAAWH,EAEzB,IAAKE,EACD,MAAM,IAAIE,EAAmBC,EAAW,8DAG5C,OAAQH,GAOJ,KAAKI,EAAwB,CACzB,MAAMC,sBAAEA,EAAqBC,MAAEA,EAAOC,WAAYC,GAAuBV,GAGnEW,UAAEA,EAASC,YAAEA,GAAgBX,EAE7BY,EAAiBD,GAAeE,EAA8BC,SAASH,IAErEV,KAAMc,GAAkBf,EAChC,IAAIQ,EAAyB,KAEP,WAAlBO,GAAgD,SAAlBA,GAA8C,eAAlBA,IAE1DP,EAAaQ,EAAkBhB,IAGnC,MAAMiB,wUAAOC,CAAA,CACTpB,YACAG,QACqC,kBAA1BK,GAAuC,CAAEA,yBAChDC,GAAS,CAAEA,SACU,kBAAdG,GAA2B,CAAEA,cACtB,IAAdA,GAAsBE,GAAkB,CAAED,eAC1CH,GAAc,CAAEA,cAChBC,GAAsB,CAAED,WAAYC,IAG5CZ,EAAgBsB,qBAAqB,CACjCC,MAAOC,EAAgBC,KACvBL,SAGJ,KACJ,CAEA,KAAKM,EAA0B,CAC3B,MAAMjB,sBAAEA,EAAqBC,MAAEA,GAAUR,EACnCkB,EAAO,CAAEnB,YAAWG,OAAMK,wBAAuBC,SAEvDV,EAAgBsB,qBAAqB,CACjCC,MAAOC,EAAgBC,KACvBL,SAEJ,KACJ,CAEA,KAAKO,EACL,KAAKC,EACL,KAAKC,EACL,KAAKC,EACL,KAAKC,EACD/B,EAAgBsB,qBAAqB,CACjCC,MAAOC,EAAgBC,KACvBL,KAAM,CAAEnB,YAAWG,OAAMC,YAE7B,MAIJ,KAAK2B,EAAwB,CACzB,MAAMC,OAAEA,GAAW/B,EACnBF,EAAgBsB,qBAAqB,CACjCC,MAAOC,EAAgBC,KACvBL,KAAM,CAAEnB,YAAWG,OAAMC,SAAQ4B,YAErC,KACJ,CAEA,KAAKC,EAAgC,CACjC,MAAMC,oBAAEA,EAAmBC,uBAAEA,GAA2BlC,EACxDF,EAAgBsB,qBAAqB,CACjCC,MAAOC,EAAgBC,KACvBL,KAAM,CAAEnB,YAAWG,OAAMC,SAAQ8B,sBAAqBC,4BAE1D,KACJ,CAKA,KAAKC,EACDrC,EAAgBsB,qBAAqB,CACjCC,MAAOC,EAAgBc,IACvBlB,KAAM,CAAEnB,YAAWG,OAAMmC,QAAS,yBAEtC,MAEJ,KAAKC,EAAsB,CACvB,MAAMC,QAAEA,EAAOF,QAAEA,GAAYrC,EAC7BF,EAAgBsB,qBAAqB,CACjCC,MAAOC,EAAgBc,IACvBlB,KAAM,CAAEnB,YAAWG,OAAMqC,UAASF,aAEtC,KACJ,CAGA,KAAKG,EAAe,CAChB,MAAMH,QAAEA,EAAOI,SAAEA,EAAQF,QAAEA,EAAOG,OAAEA,GAAW1C,EAE/CF,EAAgBsB,qBAAqB,CACjCC,MAAOC,EAAgBc,IACvBlB,KAAM,CAAEnB,YAAWG,OAAMmC,UAASI,WAAUF,UAASG,YAEzD,KACJ,CAKA,KAAKC,EACL,KAAKrB,EAAgBsB,MAAO,CACxB,MAAMP,QAAEA,EAAOQ,KAAEA,EAAIC,UAAEA,GAAc9C,EACrCF,EAAgBsB,qBAAqB,CACjCC,MAAOC,EAAgBsB,MACvB1B,KAAM,CAAEnB,YAAWG,OAAMmC,UAASQ,OAAMC,eAE5C,KACJ,CAEA,QACIhD,EAAgBsB,qBAAqBpB,GAE7C"}