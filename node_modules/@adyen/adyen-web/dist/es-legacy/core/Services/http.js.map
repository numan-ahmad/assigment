{"version":3,"file":"http.js","sources":["../../../../src/core/Services/http.ts"],"sourcesContent":["import { DEFAULT_HTTP_TIMEOUT, FALLBACK_CONTEXT } from '../config';\nimport AdyenCheckoutError from '../Errors/AdyenCheckoutError';\n\nexport interface HttpOptions {\n    accept?: string;\n    contentType?: string;\n    headers?;\n    loadingContext?: string;\n    method?: string;\n    path: string;\n    timeout?: number;\n    errorLevel?: ErrorLevel;\n    errorMessage?: string;\n}\n\ntype ErrorLevel = 'silent' | 'info' | 'warn' | 'error' | 'fatal';\n\ntype AdyenApiErrorResponse = {\n    errorCode: string;\n    message: string;\n    errorType: string;\n    status: number;\n};\n\nfunction isAdyenApiErrorResponse(data: any): data is AdyenApiErrorResponse {\n    return data && data.errorCode && data.errorType && data.message && data.status;\n}\n\nexport function http<T>(options: HttpOptions, data?: any): Promise<T> {\n    const { headers = [], errorLevel = 'warn', loadingContext = FALLBACK_CONTEXT, method = 'GET', path, timeout = DEFAULT_HTTP_TIMEOUT } = options;\n\n    const request: RequestInit = {\n        method,\n        mode: 'cors',\n        cache: 'default',\n        credentials: 'same-origin',\n        headers: {\n            Accept: 'application/json, text/plain, */*',\n            'Content-Type': method === 'POST' ? 'application/json' : 'text/plain',\n            ...headers\n        },\n        redirect: 'follow',\n        referrerPolicy: 'no-referrer-when-downgrade',\n        ...(AbortSignal?.timeout && { signal: AbortSignal?.timeout(timeout) }),\n        ...(data && { body: JSON.stringify(data) })\n    };\n\n    const url = `${loadingContext}${path}`;\n\n    return (\n        fetch(url, request)\n            .then(async response => {\n                const data = await response.json();\n\n                if (response.ok) {\n                    return data;\n                }\n\n                if (isAdyenApiErrorResponse(data)) {\n                    handleFetchError(data.message, errorLevel, data);\n                    return;\n                }\n\n                const errorMessage = options.errorMessage || `Service at ${url} is not available`;\n                handleFetchError(errorMessage, errorLevel, data);\n                return;\n            })\n            /**\n             * Catch block handles Network error, CORS error, or exception throw by the `handleFetchError`\n             * inside the `then` block\n             */\n            .catch((error: unknown) => {\n                /**\n                 * If error is instance of AdyenCheckoutError, which means that it was already\n                 * handled by the `handleFetchError` on the `then` block, then we just throw it.\n                 * There is no need to create it again\n                 */\n                if (error instanceof AdyenCheckoutError) {\n                    throw error;\n                }\n\n                // eslint-disable-next-line @typescript-eslint/no-base-to-string,@typescript-eslint/restrict-template-expressions\n                const errorMessage = options.errorMessage || `Call to ${url} failed. Error= ${error}`;\n                handleFetchError(errorMessage, errorLevel, error);\n            })\n    );\n}\n\nfunction handleFetchError(message: string, level: ErrorLevel, error: unknown): void {\n    switch (level) {\n        case 'silent': {\n            break;\n        }\n        case 'info':\n        case 'warn':\n        case 'error': {\n            console[level](message);\n            break;\n        }\n        default:\n            throw new AdyenCheckoutError('NETWORK_ERROR', message, { cause: error });\n    }\n}\n\nexport function httpGet<T = any>(options: HttpOptions, data?: any): Promise<T> {\n    return http<T>({ ...options, method: 'GET' }, data);\n}\n\nexport function httpPost<T = any>(options: HttpOptions, data?: any): Promise<T> {\n    return http<T>({ ...options, method: 'POST' }, data);\n}\n"],"names":["http","options","data","AbortSignal","headers","errorLevel","loadingContext","FALLBACK_CONTEXT","method","path","timeout","DEFAULT_HTTP_TIMEOUT","request","_object_spread","mode","cache","credentials","Accept","redirect","referrerPolicy","signal","body","JSON","stringify","url","fetch","then","async","response","json","ok","errorCode","errorType","message","status","isAdyenApiErrorResponse","handleFetchError","errorMessage","catch","error","AdyenCheckoutError","level","console","cause","httpGet","_object_spread_props","httpPost"],"mappings":"w6BA4BO,SAASA,EAAQC,EAAsBC,OAelCC,EAAkCA,EAd1C,MAAMC,QAAEA,EAAU,GAAEC,WAAEA,EAAa,OAAMC,eAAEA,EAAiBC,EAAgBC,OAAEA,EAAS,MAAKC,KAAEA,EAAIC,QAAEA,EAAUC,GAAyBV,EAEjIW,EAAuBC,EAAA,CACzBL,SACAM,KAAM,OACNC,MAAO,UACPC,YAAa,cACbZ,QAASS,EAAA,CACLI,OAAQ,oCACR,eAA2B,SAAXT,EAAoB,mBAAqB,cACtDJ,GAEPc,SAAU,SACVC,eAAgB,+BACZhB,QAAAA,EAAAA,mBAAAA,IAAAA,OAAAA,EAAAA,EAAaO,UAAW,CAAEU,OAAQjB,QAAAA,EAAAA,mBAAAA,IAAAA,OAAAA,EAAAA,EAAaO,QAAQA,IACvDR,GAAQ,CAAEmB,KAAMC,KAAKC,UAAUrB,KAGjCsB,EAAM,GAAGlB,IAAiBG,IAEhC,OACIgB,MAAMD,EAAKZ,GACNc,MAAKC,MAAMC,IACR,MAAM1B,QAAa0B,EAASC,OAE5B,GAAID,EAASE,GACT,OAAO5B,EAGX,GAlChB,SAAiCA,GAC7B,OAAOA,GAAQA,EAAK6B,WAAa7B,EAAK8B,WAAa9B,EAAK+B,SAAW/B,EAAKgC,MAC5E,CAgCoBC,CAAwBjC,GAExB,YADAkC,EAAiBlC,EAAK+B,QAAS5B,EAAYH,GAK/CkC,EADqBnC,EAAQoC,cAAgB,cAAcb,qBAC5BnB,EAAYH,EAC3C,IAMHoC,OAAOC,IAMJ,GAAIA,aAAiBC,EACjB,MAAMD,EAKVH,EADqBnC,EAAQoC,cAAgB,WAAWb,oBAAsBe,IAC/ClC,EAAYkC,EAAAA,GAG3D,CAEA,SAASH,EAAiBH,EAAiBQ,EAAmBF,GAC1D,OAAQE,GACJ,IAAK,SACD,MAEJ,IAAK,OACL,IAAK,OACL,IAAK,QACDC,QAAQD,GAAOR,GACf,MAEJ,QACI,MAAM,IAAIO,EAAmB,gBAAiBP,EAAS,CAAEU,MAAOJ,IAE5E,CAEO,SAASK,EAAiB3C,EAAsBC,GACnD,OAAOF,EAAQ6C,EAAK5C,EAAAA,CAAAA,EAAAA,GAAAA,CAASO,OAAQ,QAASN,EAClD,CAEO,SAAS4C,EAAkB7C,EAAsBC,GACpD,OAAOF,EAAQ6C,EAAK5C,EAAAA,CAAAA,EAAAA,GAAAA,CAASO,OAAQ,SAAUN,EACnD"}