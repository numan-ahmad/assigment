{"version":3,"file":"GooglePay.js","sources":["../../../../src/components/GooglePay/GooglePay.tsx"],"sourcesContent":["import { h } from 'preact';\nimport UIElement from '../internal/UIElement/UIElement';\nimport GooglePayService from './GooglePayService';\nimport GooglePayButton from './components/GooglePayButton';\nimport defaultProps from './defaultProps';\nimport { formatGooglePayContactToAdyenAddressFormat, getGooglePayLocale } from './utils';\nimport collectBrowserInfo from '../../utils/browserInfo';\nimport AdyenCheckoutError from '../../core/Errors/AdyenCheckoutError';\nimport { TxVariants } from '../tx-variants';\nimport { sanitizeResponse, verifyPaymentDidNotFail } from '../internal/UIElement/utils';\nimport { ANALYTICS_INSTANT_PAYMENT_BUTTON, ANALYTICS_SELECTED_STR } from '../../core/Analytics/constants';\nimport { SendAnalyticsObject } from '../../core/Analytics/types';\n\nimport type { AddressData, BrowserInfo, PaymentResponseData, RawPaymentResponse } from '../../types/global-types';\nimport type { GooglePayConfiguration } from './types';\nimport type { ICore } from '../../core/types';\n\nclass GooglePay extends UIElement<GooglePayConfiguration> {\n    public static type = TxVariants.googlepay;\n    public static txVariants = [TxVariants.googlepay, TxVariants.paywithgoogle];\n    public static defaultProps = defaultProps;\n\n    protected readonly googlePay;\n\n    constructor(checkout: ICore, props?: GooglePayConfiguration) {\n        super(checkout, props);\n        this.handleAuthorization = this.handleAuthorization.bind(this);\n\n        const { isExpress, paymentDataCallbacks } = this.props;\n\n        if (isExpress === false && paymentDataCallbacks?.onPaymentDataChanged) {\n            throw new AdyenCheckoutError(\n                'IMPLEMENTATION_ERROR',\n                'GooglePay - You must set \"isExpress\" flag to \"true\" in order to use \"onPaymentDataChanged\" callback'\n            );\n        }\n\n        this.googlePay = new GooglePayService(this.props.environment, {\n            ...(isExpress && paymentDataCallbacks?.onPaymentDataChanged && { onPaymentDataChanged: paymentDataCallbacks.onPaymentDataChanged }),\n            onPaymentAuthorized: this.onPaymentAuthorized\n        });\n    }\n\n    protected override formatProps(props): GooglePayConfiguration {\n        const buttonSizeMode = props.buttonSizeMode ?? (props.isDropin ? 'fill' : 'static');\n        const buttonLocale = getGooglePayLocale(props.buttonLocale ?? props.i18n?.locale);\n\n        const callbackIntents: google.payments.api.CallbackIntent[] = [...props.callbackIntents, 'PAYMENT_AUTHORIZATION'];\n\n        return {\n            ...props,\n            configuration: props.configuration,\n            buttonSizeMode,\n            buttonLocale,\n            callbackIntents\n        };\n    }\n\n    /**\n     * Formats the component data output\n     */\n    protected override formatData() {\n        const { googlePayCardNetwork, googlePayToken, billingAddress, deliveryAddress } = this.state;\n        const { isExpress } = this.props;\n\n        return {\n            paymentMethod: {\n                type: this.type,\n                googlePayCardNetwork,\n                googlePayToken,\n                ...(isExpress && { subtype: 'express' })\n            },\n            browserInfo: this.browserInfo,\n            origin: !!window && window.location.origin,\n            ...(billingAddress && { billingAddress }),\n            ...(deliveryAddress && { deliveryAddress })\n        };\n    }\n\n    protected submitAnalytics(analyticsObj: SendAnalyticsObject) {\n        // Analytics will need to know about this.props.isExpress & this.props.expressPage\n        super.submitAnalytics({ ...analyticsObj }, this.props);\n    }\n\n    public override submit = () => {\n        // Analytics\n        if (this.props.isInstantPayment) {\n            this.submitAnalytics({ type: ANALYTICS_SELECTED_STR, target: ANALYTICS_INSTANT_PAYMENT_BUTTON });\n        }\n\n        new Promise((resolve, reject) => this.props.onClick(resolve, reject))\n            .then(() => this.googlePay.initiatePayment(this.props, this.core.options.countryCode))\n            .catch((error: google.payments.api.PaymentsError) => {\n                if (error.statusCode === 'CANCELED') {\n                    // eslint-disable-next-line @typescript-eslint/no-base-to-string\n                    this.handleError(new AdyenCheckoutError('CANCEL', error.toString(), { cause: error }));\n                } else {\n                    // eslint-disable-next-line @typescript-eslint/no-base-to-string\n                    this.handleError(new AdyenCheckoutError('ERROR', error.toString(), { cause: error }));\n                }\n            });\n    };\n\n    /**\n     * Method called when the payment is authorized in the payment sheet\n     *\n     * @see https://developers.google.com/pay/api/web/reference/client#onPaymentAuthorized\n     **/\n    private onPaymentAuthorized = async (paymentData: google.payments.api.PaymentData): Promise<google.payments.api.PaymentAuthorizationResult> => {\n        const billingAddress: AddressData = formatGooglePayContactToAdyenAddressFormat(paymentData.paymentMethodData.info.billingAddress);\n        const deliveryAddress: AddressData = formatGooglePayContactToAdyenAddressFormat(paymentData.shippingAddress, true);\n\n        this.setState({\n            authorizedEvent: paymentData,\n            googlePayToken: paymentData.paymentMethodData.tokenizationData.token,\n            googlePayCardNetwork: paymentData.paymentMethodData.info.cardNetwork,\n            ...(billingAddress && { billingAddress }),\n            ...(deliveryAddress && { deliveryAddress })\n        });\n\n        return new Promise<google.payments.api.PaymentAuthorizationResult>(resolve => {\n            this.handleAuthorization()\n                .then(this.makePaymentsCall)\n                .then(sanitizeResponse)\n                .then(verifyPaymentDidNotFail)\n                .then((paymentResponse: PaymentResponseData) => {\n                    resolve({ transactionState: 'SUCCESS' });\n                    return paymentResponse;\n                })\n                .then(paymentResponse => {\n                    this.handleResponse(paymentResponse);\n                })\n                .catch((paymentResponse?: RawPaymentResponse) => {\n                    this.setElementStatus('ready');\n\n                    const googlePayError = paymentResponse?.error?.googlePayError;\n                    const fallbackMessage = this.props.i18n.get('error.subtitle.payment');\n\n                    const error: google.payments.api.PaymentDataError =\n                        typeof googlePayError === 'string' || undefined\n                            ? {\n                                  intent: 'PAYMENT_AUTHORIZATION',\n                                  reason: 'OTHER_ERROR',\n                                  message: (googlePayError as string) || fallbackMessage\n                              }\n                            : {\n                                  intent: googlePayError?.intent || 'PAYMENT_AUTHORIZATION',\n                                  reason: googlePayError?.reason || 'OTHER_ERROR',\n                                  message: googlePayError?.message || fallbackMessage\n                              };\n\n                    resolve({\n                        transactionState: 'ERROR',\n                        error\n                    });\n\n                    const responseWithError = {\n                        ...paymentResponse,\n                        error: {\n                            googlePayError: error\n                        }\n                    };\n\n                    this.handleFailedResult(responseWithError);\n                });\n        });\n    };\n\n    /**\n     * Call the 'onAuthorized' callback if available.\n     * Must be resolved/reject for the payment flow to continue\n     */\n    private async handleAuthorization(): Promise<void> {\n        return new Promise<void>((resolve, reject) => {\n            if (!this.props.onAuthorized) {\n                resolve();\n            }\n\n            const { authorizedEvent, billingAddress, deliveryAddress } = this.state;\n\n            this.props.onAuthorized(\n                {\n                    authorizedEvent,\n                    ...(billingAddress && { billingAddress }),\n                    ...(deliveryAddress && { deliveryAddress })\n                },\n                { resolve, reject }\n            );\n        }).catch((error?: google.payments.api.PaymentDataError | string) => {\n            // Format error in a way that the 'catch' of the 'onPaymentAuthorize' block accepts it\n            const data = { error: { googlePayError: error } };\n            return Promise.reject(data);\n        });\n    }\n\n    /**\n     * Validation\n     */\n    get isValid(): boolean {\n        return !!this.state.googlePayToken;\n    }\n\n    /**\n     * Determine a shopper's ability to return a form of payment from the Google Pay API.\n     */\n    public override async isAvailable(): Promise<void> {\n        return this.isReadyToPay()\n            .then(response => {\n                if (!response.result) {\n                    throw new AdyenCheckoutError('ERROR', 'GooglePay is not available');\n                }\n\n                if (response.paymentMethodPresent === false) {\n                    throw new AdyenCheckoutError('ERROR', 'GooglePay - No paymentMethodPresent');\n                }\n\n                return Promise.resolve();\n            })\n            .catch(error => {\n                return Promise.reject(error);\n            });\n    }\n\n    /**\n     * Determine a shopper's ability to return a form of payment from the Google Pay API.\n     */\n    public isReadyToPay = (): Promise<google.payments.api.IsReadyToPayResponse> => {\n        return this.googlePay.isReadyToPay(this.props);\n    };\n\n    /**\n     * Use this method to prefetch a PaymentDataRequest configuration to improve loadPaymentData execution time on later user interaction. No value is returned.\n     */\n    public prefetch = (): void => {\n        return this.googlePay.prefetchPaymentData(this.props, this.core.options.countryCode);\n    };\n\n    get browserInfo(): BrowserInfo {\n        return collectBrowserInfo();\n    }\n\n    get icon(): string {\n        return this.props.icon ?? this.resources.getImage()('googlepay');\n    }\n\n    render() {\n        if (this.props.showPayButton) {\n            return (\n                <GooglePayButton\n                    buttonColor={this.props.buttonColor}\n                    buttonType={this.props.buttonType}\n                    buttonSizeMode={this.props.buttonSizeMode}\n                    buttonLocale={this.props.buttonLocale}\n                    buttonRootNode={this.props.buttonRootNode}\n                    buttonRadius={this.props.buttonRadius}\n                    paymentsClient={this.googlePay.paymentsClient}\n                    onClick={this.submit}\n                />\n            );\n        }\n\n        return null;\n    }\n}\n\nexport default GooglePay;\n"],"names":["GooglePay","UIElement","formatProps","props","buttonSizeMode","isDropin","buttonLocale","getGooglePayLocale","i18n","locale","callbackIntents","_object_spread_props","configuration","formatData","googlePayCardNetwork","googlePayToken","billingAddress","deliveryAddress","this","state","isExpress","_object_spread","paymentMethod","type","subtype","browserInfo","origin","window","location","submitAnalytics","analyticsObj","super","handleAuthorization","Promise","resolve","reject","onAuthorized","authorizedEvent","catch","error","data","googlePayError","isValid","isAvailable","isReadyToPay","then","response","result","AdyenCheckoutError","paymentMethodPresent","collectBrowserInfo","icon","_this_props_icon","resources","getImage","render","showPayButton","h","GooglePayButton","buttonColor","buttonType","buttonRootNode","buttonRadius","paymentsClient","googlePay","onClick","submit","constructor","checkout","_define_property","isInstantPayment","ANALYTICS_SELECTED_STR","target","ANALYTICS_INSTANT_PAYMENT_BUTTON","initiatePayment","core","options","countryCode","statusCode","handleError","toString","cause","onPaymentAuthorized","async","paymentData","formatGooglePayContactToAdyenAddressFormat","paymentMethodData","info","shippingAddress","setState","tokenizationData","token","cardNetwork","makePaymentsCall","sanitizeResponse","verifyPaymentDidNotFail","paymentResponse","transactionState","handleResponse","setElementStatus","fallbackMessage","get","intent","reason","message","responseWithError","handleFailedResult","prefetch","prefetchPaymentData","bind","paymentDataCallbacks","onPaymentDataChanged","GooglePayService","environment","TxVariants","googlepay","txVariants","paywithgoogle","defaultProps"],"mappings":"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"}