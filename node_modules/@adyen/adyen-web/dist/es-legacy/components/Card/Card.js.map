{"version":3,"file":"Card.js","sources":["../../../../src/components/Card/Card.tsx"],"sourcesContent":["import { h } from 'preact';\nimport CardInput from './components/CardInput';\nimport { CoreProvider } from '../../core/Context/CoreProvider';\nimport collectBrowserInfo from '../../utils/browserInfo';\nimport { BinLookupResponse, CardElementData, CardConfiguration } from './types';\nimport triggerBinLookUp from '../internal/SecuredFields/binLookup/triggerBinLookUp';\nimport { CbObjOnBinLookup, CbObjOnConfigSuccess, CbObjOnFocus } from '../internal/SecuredFields/lib/types';\nimport { fieldTypeToSnakeCase } from '../internal/SecuredFields/utils';\nimport { reject } from '../../utils/commonUtils';\nimport { hasValidInstallmentsObject } from './components/CardInput/utils';\nimport createClickToPayService from '../internal/ClickToPay/services/create-clicktopay-service';\nimport { ClickToPayCheckoutPayload, IClickToPayService } from '../internal/ClickToPay/services/types';\nimport ClickToPayWrapper from './components/ClickToPayWrapper';\nimport { ComponentFocusObject } from '../../types/global-types';\nimport SRPanelProvider from '../../core/Errors/SRPanelProvider';\nimport { TxVariants } from '../tx-variants';\nimport type { PayButtonFunctionProps, UIElementStatus } from '../internal/UIElement/types';\nimport UIElement from '../internal/UIElement';\nimport PayButton from '../internal/PayButton';\nimport type { ICore } from '../../core/types';\nimport {\n    ANALYTICS_FOCUS_STR,\n    ANALYTICS_CONFIGURED_STR,\n    ANALYTICS_UNFOCUS_STR,\n    ANALYTICS_VALIDATION_ERROR_STR,\n    ANALYTICS_RENDERED_STR\n} from '../../core/Analytics/constants';\nimport { ALL_SECURED_FIELDS } from '../internal/SecuredFields/lib/constants';\nimport { FieldErrorAnalyticsObject, SendAnalyticsObject } from '../../core/Analytics/types';\nimport { hasOwnProperty } from '../../utils/hasOwnProperty';\nimport AdyenCheckoutError, { IMPLEMENTATION_ERROR } from '../../core/Errors/AdyenCheckoutError';\nimport { getErrorMessageFromCode } from '../../core/Errors/utils';\nimport { SF_ErrorCodes } from '../../core/Errors/constants';\nimport CardInputDefaultProps from './components/CardInput/defaultProps';\n\nexport class CardElement extends UIElement<CardConfiguration> {\n    public static type = TxVariants.scheme;\n\n    private readonly clickToPayService: IClickToPayService | null;\n\n    /**\n     * Reference to the 'ClickToPayComponent'\n     */\n    private clickToPayRef = null;\n\n    constructor(checkout: ICore, props?: CardConfiguration) {\n        super(checkout, props);\n\n        if (props && !props._disableClickToPay) {\n            this.clickToPayService = createClickToPayService(this.props.configuration, this.props.clickToPayConfiguration, this.props.environment);\n            void this.clickToPayService?.initialize();\n        }\n    }\n\n    protected static defaultProps = {\n        showFormInstruction: true,\n        _disableClickToPay: false,\n        doBinLookup: true,\n        // Merge most of CardInput's defaultProps\n        ...reject(['type', 'setComponentRef']).from(CardInputDefaultProps)\n    };\n\n    public setStatus(status: UIElementStatus, props?): this {\n        if (this.componentRef?.setStatus) {\n            this.componentRef.setStatus(status, props);\n        }\n        if (this.clickToPayRef?.setStatus) {\n            this.clickToPayRef.setStatus(status, props);\n        }\n        return this;\n    }\n\n    private setClickToPayRef = ref => {\n        this.clickToPayRef = ref;\n    };\n\n    formatProps(props: CardConfiguration): CardConfiguration {\n        // The value from a session should be used, before falling back to the merchant configuration\n        const enableStoreDetails = props.session?.configuration?.enableStoreDetails ?? props.enableStoreDetails;\n\n        const isZeroAuth = props.amount?.value === 0;\n        const showStoreDetailsCheckbox = isZeroAuth ? false : enableStoreDetails;\n\n        const storedCardID = props.storedPaymentMethodId || props.id; // check if we've been passed a (checkout) processed storedCard or one that merchant has pulled from the PMs response\n        const isEcommerceStoredCard = storedCardID && props?.supportedShopperInteractions?.includes('Ecommerce'); // If we have a storedCard does it support Ecommerce (it might not if the merchant has pulled it from the PMs response)\n\n        // If we have a storedPM but it doesn't support Ecommerce - we can't make a storedCard component from it\n        if (storedCardID && !isEcommerceStoredCard) {\n            // TODO - Decide if an error is too severe? Would a console.warning suffice?\n            throw new AdyenCheckoutError(\n                IMPLEMENTATION_ERROR,\n                'You are trying to create a storedCard from a stored PM that does not support Ecommerce interactions'\n            );\n        }\n\n        return {\n            ...props,\n            // Mismatch between hasHolderName & holderNameRequired which can mean card can never be valid\n            holderNameRequired: !props.hasHolderName ? false : props.holderNameRequired,\n            // False for *stored* BCMC cards & if merchant explicitly wants to hide the CVC field\n            hasCVC: !((props.brand && props.brand === 'bcmc') || props.hideCVC),\n            // billingAddressRequired only available for non-stored cards\n            billingAddressRequired: props.storedPaymentMethodId ? false : props.billingAddressRequired,\n            // edge case where merchant has defined both an onAddressLookup callback AND set billingAddressMode: 'partial' - which leads to some strange behaviour in the address UI\n            billingAddressMode: props.onAddressLookup ? CardInputDefaultProps.billingAddressMode : props.billingAddressMode,\n            /** props.brand will be specified in the case of a StoredCard or a Bancontact component, for a regular Card we default it to 'card' */\n            brand: props.brand ?? TxVariants.card,\n            countryCode: props.countryCode ? props.countryCode.toLowerCase() : null,\n            // Required for transition period (until configuration object becomes the norm)\n            // - if merchant has defined value directly in props, use this instead\n            configuration: {\n                ...props.configuration,\n                socialSecurityNumberMode: props.configuration?.socialSecurityNumberMode ?? 'auto'\n            },\n            brandsConfiguration: props.brandsConfiguration || props.configuration?.brandsConfiguration || {},\n            icon: props.icon || props.configuration?.icon,\n            // installmentOptions of a session should be used before falling back to the merchant configuration\n            installmentOptions: props.session?.configuration?.installmentOptions || props.installmentOptions,\n            enableStoreDetails,\n            showStoreDetailsCheckbox,\n            /**\n             * Click to Pay configuration\n             * - If email is set explicitly in the configuration, then it can override the one used in the session creation\n             */\n            clickToPayConfiguration: {\n                ...props.clickToPayConfiguration,\n                disableOtpAutoFocus: props.clickToPayConfiguration?.disableOtpAutoFocus || false,\n                shopperEmail: props.clickToPayConfiguration?.shopperEmail || this.core.options?.session?.shopperEmail,\n                telephoneNumber: props.clickToPayConfiguration?.telephoneNumber || this.core.options?.session?.telephoneNumber,\n                locale: props.clickToPayConfiguration?.locale || props.i18n?.locale?.replace('-', '_')\n            },\n            ...(storedCardID && { storedPaymentMethodId: storedCardID })\n        };\n    }\n\n    /**\n     * Formats the component data output\n     */\n    formatData(): CardElementData {\n        /**\n         *  this.state.selectedBrandValue will be set when:\n         *  - /binLookup detects a single brand,\n         *  - when /binLookup detects a dual-branded card and the shopper makes a brand selection\n         *  - or, in the case of a storedCard\n         */\n        const cardBrand = this.state.selectedBrandValue;\n\n        return {\n            paymentMethod: {\n                type: CardElement.type,\n                ...this.state.data,\n                ...(this.props.storedPaymentMethodId && {\n                    storedPaymentMethodId: this.props.storedPaymentMethodId,\n                    holderName: this.props.holderName ?? ''\n                }),\n                ...(cardBrand && { brand: cardBrand }),\n                ...(this.props.fundingSource && { fundingSource: this.props.fundingSource })\n            },\n            ...(this.state.billingAddress && { billingAddress: this.state.billingAddress }),\n            ...(this.state.socialSecurityNumber && { socialSecurityNumber: this.state.socialSecurityNumber }),\n            ...this.storePaymentMethodPayload,\n            ...(hasValidInstallmentsObject(this.state.installments) && { installments: this.state.installments }),\n            browserInfo: this.browserInfo,\n            origin: !!window && window.location.origin\n        };\n    }\n\n    updateStyles(stylesObj) {\n        if (this.componentRef?.updateStyles) this.componentRef.updateStyles(stylesObj);\n        return this;\n    }\n\n    setFocusOn(fieldName) {\n        if (this.componentRef?.setFocusOn) this.componentRef.setFocusOn(fieldName);\n        return this;\n    }\n\n    public onBrand = event => {\n        this.props.onBrand?.(event);\n    };\n\n    processBinLookupResponse(binLookupResponse: BinLookupResponse, isReset = false) {\n        if (this.componentRef?.processBinLookupResponse) this.componentRef.processBinLookupResponse(binLookupResponse, isReset);\n        return this;\n    }\n\n    handleUnsupportedCard(errObj) {\n        if (this.componentRef?.handleUnsupportedCard) this.componentRef.handleUnsupportedCard(errObj);\n        return this;\n    }\n\n    private handleClickToPaySubmit = (payload: ClickToPayCheckoutPayload) => {\n        this.setState({ data: { ...payload }, valid: {}, errors: {}, isValid: true });\n        this.submit();\n    };\n\n    onBinLookup(obj: CbObjOnBinLookup) {\n        // Handler for regular card comp doesn't need this 'raw' data or to know about 'resets'\n        if (!obj.isReset) {\n            const nuObj = reject('supportedBrandsRaw').from(obj);\n            this.props.onBinLookup?.(nuObj);\n        }\n    }\n\n    protected submitAnalytics(analyticsObj: SendAnalyticsObject) {\n        const { type } = analyticsObj;\n\n        if (type === ANALYTICS_RENDERED_STR || type === ANALYTICS_CONFIGURED_STR) {\n            // Check if it's a storedCard\n            if (this.constructor['type'] === 'scheme') {\n                if (hasOwnProperty(this.props, 'supportedShopperInteractions')) {\n                    analyticsObj.isStoredPaymentMethod = true;\n                    analyticsObj.brand = this.props.brand;\n                }\n            }\n        }\n\n        super.submitAnalytics(analyticsObj, this.props);\n    }\n\n    private onConfigSuccess = (obj: CbObjOnConfigSuccess) => {\n        this.submitAnalytics({\n            type: ANALYTICS_CONFIGURED_STR\n        });\n\n        this.props.onConfigSuccess?.(obj);\n    };\n\n    private onFocus = (obj: ComponentFocusObject) => {\n        this.submitAnalytics({\n            type: ANALYTICS_FOCUS_STR,\n            target: fieldTypeToSnakeCase(obj.fieldType)\n        });\n\n        // Call merchant defined callback\n        if (ALL_SECURED_FIELDS.includes(obj.fieldType)) {\n            this.props.onFocus?.(obj.event as CbObjOnFocus);\n        } else {\n            this.props.onFocus?.(obj);\n        }\n    };\n\n    private onBlur = (obj: ComponentFocusObject) => {\n        this.submitAnalytics({\n            type: ANALYTICS_UNFOCUS_STR,\n            target: fieldTypeToSnakeCase(obj.fieldType)\n        });\n\n        // Call merchant defined callback\n        if (ALL_SECURED_FIELDS.includes(obj.fieldType)) {\n            this.props.onBlur?.(obj.event as CbObjOnFocus);\n        } else {\n            this.props.onBlur?.(obj);\n        }\n    };\n\n    private onValidationErrorAnalytics = (obj: FieldErrorAnalyticsObject) => {\n        this.submitAnalytics({\n            type: ANALYTICS_VALIDATION_ERROR_STR,\n            target: fieldTypeToSnakeCase(obj.fieldType),\n            validationErrorCode: obj.errorCode,\n            validationErrorMessage: getErrorMessageFromCode(obj.errorCode, SF_ErrorCodes)\n        });\n    };\n\n    public onBinValue = triggerBinLookUp(this);\n\n    get storePaymentMethodPayload() {\n        const isStoredCard = this.props.storedPaymentMethodId?.length > 0;\n        if (isStoredCard) {\n            return {};\n        }\n\n        /**\n         * For regular card, zero auth payments, we store the payment method, *if* the configuration says we should:\n         *  - For sessions, this means if the session has been created with storePaymentMethodMode: 'askForConsent'\n         *  - For the advanced flow, this means if the merchant has still set enableStoreDetails: true\n         *\n         * What we are doing is.. if for a normal payment we would show the \"Save for my next payment\" checkbox,\n         * for a zero-auth payment we effectively click the checkbox on behalf of the shopper.\n         */\n        const isZeroAuth = this.props.amount?.value === 0;\n        if (isZeroAuth) {\n            return this.props.enableStoreDetails ? { storePaymentMethod: true } : {};\n        }\n\n        // For regular card, non-zero auth payments, we store the payment method based on the checkbox value.\n        const includeStorePaymentMethod = this.props.showStoreDetailsCheckbox && typeof this.state.storePaymentMethod !== 'undefined';\n        return includeStorePaymentMethod ? { storePaymentMethod: Boolean(this.state.storePaymentMethod) } : {};\n    }\n\n    get isValid() {\n        return !!this.state.isValid;\n    }\n\n    get icon() {\n        return this.props.icon ?? this.resources.getImage()(this.props.brand);\n    }\n\n    get brands(): { icon: any; name: string }[] {\n        const { brands, brandsConfiguration } = this.props;\n        if (brands) {\n            return brands.map(brand => {\n                const brandIcon = brandsConfiguration[brand]?.icon ?? this.props.modules.resources.getImage()(brand);\n                return { icon: brandIcon, name: brand };\n            });\n        }\n\n        return [];\n    }\n\n    get displayName(): string {\n        if (this.props.storedPaymentMethodId) {\n            return `•••• ${this.props.lastFour}`;\n        }\n\n        return this.props.name || CardElement.type;\n    }\n\n    get accessibleName(): string {\n        // Use display name, unless it's a stored payment method, there inform user\n        return (\n            (this.props.name || CardElement.type) +\n            (this.props.storedPaymentMethodId\n                ? ' ' + this.props.i18n.get('creditCard.storedCard.description.ariaLabel').replace('%@', this.props.lastFour)\n                : '')\n        );\n    }\n\n    get browserInfo() {\n        return collectBrowserInfo();\n    }\n\n    protected override payButton = (props: PayButtonFunctionProps) => {\n        const isZeroAuth = this.props.amount?.value === 0;\n        const isStoredCard = this.props.storedPaymentMethodId?.length > 0;\n        return (\n            <PayButton\n                {...props}\n                amount={this.props.amount}\n                secondaryAmount={this.props.secondaryAmount}\n                label={isZeroAuth && !isStoredCard ? this.props.i18n.get('payButton.saveDetails') : ''}\n                onClick={this.submit}\n            />\n        );\n    };\n\n    private renderCardInput(isCardPrimaryInput = true): h.JSX.Element {\n        return (\n            <CardInput\n                setComponentRef={this.setComponentRef}\n                {...this.props}\n                {...this.state}\n                onChange={this.setState}\n                onSubmit={this.submit}\n                handleKeyPress={this.handleKeyPress}\n                payButton={this.payButton}\n                onBrand={this.onBrand}\n                onBinValue={this.onBinValue}\n                brand={this.props.brand}\n                brandsIcons={this.brands}\n                isPayButtonPrimaryVariant={isCardPrimaryInput}\n                resources={this.resources}\n                onFocus={this.onFocus}\n                onBlur={this.onBlur}\n                onValidationErrorAnalytics={this.onValidationErrorAnalytics}\n                onConfigSuccess={this.onConfigSuccess}\n            />\n        );\n    }\n\n    render() {\n        return (\n            <CoreProvider i18n={this.props.i18n} loadingContext={this.props.loadingContext} resources={this.resources}>\n                <SRPanelProvider srPanel={this.props.modules.srPanel}>\n                    <ClickToPayWrapper\n                        amount={this.props.amount}\n                        configuration={this.props.clickToPayConfiguration}\n                        clickToPayService={this.clickToPayService}\n                        isStandaloneComponent={false}\n                        setClickToPayRef={this.setClickToPayRef}\n                        onSetStatus={this.setElementStatus}\n                        onSubmit={this.handleClickToPaySubmit}\n                        onError={this.handleError}\n                    >\n                        {isCardPrimaryInput => this.renderCardInput(isCardPrimaryInput)}\n                    </ClickToPayWrapper>\n                </SRPanelProvider>\n            </CoreProvider>\n        );\n    }\n}\n\nexport default CardElement;\n"],"names":["CardElement","UIElement","setStatus","status","props","_this_componentRef","_this_clickToPayRef","this","componentRef","clickToPayRef","formatProps","_this_core_options_session","_this_core_options","_this_core_options_session1","_this_core_options1","enableStoreDetails","session","configuration","showStoreDetailsCheckbox","amount","value","storedCardID","storedPaymentMethodId","id","isEcommerceStoredCard","supportedShopperInteractions","includes","AdyenCheckoutError","IMPLEMENTATION_ERROR","_object_spread","holderNameRequired","hasHolderName","hasCVC","brand","hideCVC","billingAddressRequired","billingAddressMode","onAddressLookup","CardInputDefaultProps","TxVariants","card","countryCode","toLowerCase","_object_spread_props","socialSecurityNumberMode","brandsConfiguration","icon","installmentOptions","clickToPayConfiguration","disableOtpAutoFocus","shopperEmail","core","options","telephoneNumber","locale","i18n","replace","formatData","cardBrand","state","selectedBrandValue","_this_props_holderName","paymentMethod","type","data","holderName","fundingSource","billingAddress","socialSecurityNumber","storePaymentMethodPayload","hasValidInstallmentsObject","installments","browserInfo","origin","window","location","updateStyles","stylesObj","setFocusOn","fieldName","processBinLookupResponse","binLookupResponse","isReset","handleUnsupportedCard","errObj","onBinLookup","obj","_this_props_onBinLookup","_this_props","nuObj","reject","from","call","submitAnalytics","analyticsObj","ANALYTICS_RENDERED_STR","ANALYTICS_CONFIGURED_STR","constructor","hasOwnProperty","isStoredPaymentMethod","super","_this_props_storedPaymentMethodId","_this_props_amount","length","storePaymentMethod","Boolean","isValid","_this_props_icon","resources","getImage","brands","map","modules","name","displayName","lastFour","accessibleName","get","collectBrowserInfo","renderCardInput","isCardPrimaryInput","h","CardInput","setComponentRef","onChange","setState","onSubmit","submit","handleKeyPress","payButton","onBrand","onBinValue","brandsIcons","isPayButtonPrimaryVariant","onFocus","onBlur","onValidationErrorAnalytics","onConfigSuccess","render","CoreProvider","loadingContext","SRPanelProvider","srPanel","ClickToPayWrapper","clickToPayService","isStandaloneComponent","setClickToPayRef","onSetStatus","setElementStatus","handleClickToPaySubmit","onError","handleError","checkout","_this_clickToPayService","_define_property","ref","event","_this_props_onBrand","payload","valid","errors","_this_props_onConfigSuccess","_this_props_onFocus","_this_props_onFocus1","_this_props1","ANALYTICS_FOCUS_STR","target","fieldTypeToSnakeCase","fieldType","ALL_SECURED_FIELDS","_this_props_onBlur","_this_props_onBlur1","ANALYTICS_UNFOCUS_STR","ANALYTICS_VALIDATION_ERROR_STR","validationErrorCode","errorCode","validationErrorMessage","getErrorMessageFromCode","SF_ErrorCodes","triggerBinLookUp","isZeroAuth","isStoredCard","PayButton","secondaryAmount","label","onClick","_disableClickToPay","createClickToPayService","environment","initialize","scheme","defaultProps","showFormInstruction","doBinLookup"],"mappings":"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"}