{"version":3,"file":"CardInput.js","sources":["../../../../../../src/components/Card/components/CardInput/CardInput.tsx"],"sourcesContent":["import { h, Fragment } from 'preact';\nimport { useState, useEffect, useRef, useMemo, useCallback } from 'preact/hooks';\nimport SecuredFieldsProvider from '../../../internal/SecuredFields/SFP/SecuredFieldsProvider';\nimport { OnChangeEventDetails, SFPState } from '../../../internal/SecuredFields/SFP/types';\nimport defaultProps from './defaultProps';\nimport './CardInput.scss';\nimport { AddressModeOptions, CardInputDataState, CardInputErrorState, CardInputProps, CardInputRef, CardInputValidState } from './types';\nimport { CVC_POLICY_REQUIRED, DATE_POLICY_REQUIRED, ENCRYPTED_CARD_NUMBER } from '../../../internal/SecuredFields/lib/constants';\nimport { BinLookupResponse } from '../../types';\nimport { cardInputFormatters, cardInputValidationRules, getRuleByNameAndMode } from './validate';\nimport CIExtensions from '../../../internal/SecuredFields/binLookup/extensions';\nimport useForm from '../../../../utils/useForm';\nimport { SortedErrorObject } from '../../../../core/Errors/types';\nimport { handlePartialAddressMode, extractPropsForCardFields, extractPropsForSFP, getLayout } from './utils';\nimport Specifications from '../../../internal/Address/Specifications';\nimport { StoredCardFieldsWrapper } from './components/StoredCardFieldsWrapper';\nimport { CardFieldsWrapper } from './components/CardFieldsWrapper';\nimport { getAddressHandler, getAutoJumpHandler, getFocusHandler } from './handlers';\nimport { InstallmentsObj } from './components/Installments/Installments';\nimport { TouchStartEventObj } from './components/types';\nimport classNames from 'classnames';\nimport { getPartialAddressValidationRules } from '../../../internal/Address/validate';\nimport useImage from '../../../../core/Context/useImage';\nimport { getArrayDifferences } from '../../../../utils/arrayUtils';\nimport FormInstruction from '../../../internal/FormInstruction';\nimport { AddressData } from '../../../../types/global-types';\nimport { CbObjOnFocus } from '../../../internal/SecuredFields/lib/types';\nimport { FieldErrorAnalyticsObject } from '../../../../core/Analytics/types';\nimport { PREFIX } from '../../../internal/Icon/constants';\nimport useSRPanelForCardInputErrors from './useSRPanelForCardInputErrors';\n\nconst CardInput = (props: CardInputProps) => {\n    const sfp = useRef(null);\n    const isValidating = useRef(false);\n    const getImage = useImage();\n\n    const billingAddressRef = useRef(null);\n    const setAddressRef = ref => {\n        billingAddressRef.current = ref;\n    };\n\n    const cardInputRef = useRef<CardInputRef>({});\n    // Just call once to create the object by which we expose the members expected by the parent Card comp\n    if (!Object.keys(cardInputRef.current).length) {\n        props.setComponentRef(cardInputRef.current);\n    }\n\n    const hasPanLengthRef = useRef(0);\n    const isAutoJumping = useRef(false);\n\n    const specifications = useMemo(() => new Specifications(props.specifications), [props.specifications]);\n\n    // Store ref to sfp (useful for 'deep' debugging)\n    cardInputRef.current.sfp = sfp;\n\n    /**\n     * STATE HOOKS\n     */\n    const [status, setStatus] = useState('ready');\n\n    const [errors, setErrors] = useState<CardInputErrorState>({});\n    const [valid, setValid] = useState<CardInputValidState>({\n        ...(props.holderNameRequired && { holderName: false })\n    });\n    const [data, setData] = useState<CardInputDataState>({\n        ...(props.hasHolderName && { holderName: props.data.holderName ?? '' })\n    });\n\n    const [focusedElement, setFocusedElement] = useState('');\n    const [isSfpValid, setIsSfpValid] = useState(false);\n    const [expiryDatePolicy, setExpiryDatePolicy] = useState(DATE_POLICY_REQUIRED);\n    const [cvcPolicy, setCvcPolicy] = useState(CVC_POLICY_REQUIRED);\n    const [issuingCountryCode, setIssuingCountryCode] = useState<string>(null);\n\n    const [dualBrandSelectElements, setDualBrandSelectElements] = useState([]);\n    const [selectedBrandValue, setSelectedBrandValue] = useState(props.storedPaymentMethodId ? props.brand : ''); // If this is a storedCard comp initialise state with the storedCard's brand\n\n    const showBillingAddress = props.billingAddressMode !== AddressModeOptions.none && props.billingAddressRequired;\n\n    const partialAddressSchema = handlePartialAddressMode(props.billingAddressMode);\n    // Keeps the value of the country set initially by the merchant, before the Address Component mutates it\n    const partialAddressCountry = useRef<string>(partialAddressSchema && props.data?.billingAddress?.country);\n\n    const [storePaymentMethod, setStorePaymentMethod] = useState(false);\n    const [billingAddress, setBillingAddress] = useState<AddressData>(showBillingAddress ? props.data.billingAddress : null);\n    const [showSocialSecurityNumber, setShowSocialSecurityNumber] = useState(false);\n    const [socialSecurityNumber, setSocialSecurityNumber] = useState('');\n    const [installments, setInstallments] = useState<InstallmentsObj>({ value: null });\n\n    // re. Disable arrows for iOS: The name of the element calling for other elements to be disabled\n    // - either a securedField type (like 'encryptedCardNumber') when call is coming from SF\n    // or else the name of an internal, Adyen-web, element (like 'holderName')\n    const [iOSFocusedField, setIOSFocusedField] = useState(null);\n\n    /**\n     * LOCAL VARS\n     */\n    const {\n        handleChangeFor,\n        triggerValidation,\n        data: formData,\n        valid: formValid,\n        errors: formErrors,\n        setSchema,\n        setData: setFormData,\n        setValid: setFormValid,\n        setErrors: setFormErrors\n    } = useForm<CardInputDataState>({\n        schema: [],\n        defaultData: props.data,\n        formatters: cardInputFormatters,\n        rules: cardInputValidationRules\n    });\n\n    const hasInstallments = !!Object.keys(props.installmentOptions).length && props.fundingSource !== 'debit';\n    const showAmountsInInstallments = props.showInstallmentAmounts ?? true;\n\n    const cardCountryCode: string = issuingCountryCode ?? props.countryCode;\n    const isKorea = cardCountryCode === 'kr'; // If issuingCountryCode or the merchant defined countryCode is set to 'kr'\n    const showKCP = props.configuration.koreanAuthenticationRequired && isKorea;\n\n    const showBrazilianSSN: boolean =\n        (showSocialSecurityNumber && props.configuration.socialSecurityNumberMode === 'auto') ||\n        props.configuration.socialSecurityNumberMode === 'show';\n\n    /**\n     * HANDLERS\n     */\n    // Handlers for focus & blur on all fields. Can be renamed to onFieldFocus once the onFocusField is renamed in Field.tsx\n    const onFieldFocusAnalytics = (who: string, e: Event | CbObjOnFocus) => {\n        props.onFocus({ fieldType: who, event: e });\n    };\n    const onFieldBlurAnalytics = (who: string, e: Event | CbObjOnFocus) => {\n        props.onBlur({ fieldType: who, event: e });\n    };\n\n    // Make SecuredFields aware of the focus & blur handlers\n    const handleFocus = getFocusHandler(setFocusedElement, onFieldFocusAnalytics, onFieldBlurAnalytics);\n\n    const retrieveLayout = (): string[] => {\n        return getLayout({\n            props,\n            showKCP,\n            showBrazilianSSN,\n            ...(props.billingAddressRequired && {\n                countrySpecificSchemas: specifications.getAddressSchemaForCountry(billingAddress?.country),\n                billingAddressRequiredFields: props.billingAddressRequiredFields\n            })\n        });\n    };\n\n    /**\n     * re. Disabling arrow keys in iOS:\n     * Only by disabling all fields in the Card PM except for the active securedField input can we force the iOS soft keyboard arrow keys to disable\n     *\n     * NOTE: only called if ua.__IS_IOS = true && this.config.disableIOSArrowKeys = true (as referenced in CSF)\n     *\n     * @param obj - has fieldType prop saying whether this function is being called in response to an securedFields click ('encryptedCardNumber' etc)\n     * - in which case we should disable all non-SF fields\n     * or,\n     * due to an internal action ('webInternalElement') - in which case we can enable all non-SF fields\n     */\n    const handleTouchstartIOS = useCallback((obj: TouchStartEventObj) => {\n        const elementType = obj.fieldType !== 'webInternalElement' ? obj.fieldType : obj.name;\n        setIOSFocusedField(elementType);\n    }, []);\n\n    const handleAddress = getAddressHandler(setFormData, setFormValid, setFormErrors);\n\n    const doPanAutoJump = getAutoJumpHandler(isAutoJumping, sfp, retrieveLayout());\n\n    const handleSecuredFieldsChange = (sfState: SFPState, eventDetails?: OnChangeEventDetails): void => {\n        /**\n         * Handling auto complete value for holderName (but only if the component is using a holderName field)\n         */\n        if (sfState.autoCompleteName) {\n            if (!props.hasHolderName) return;\n            const holderNameValidationFn = getRuleByNameAndMode('holderName', 'blur');\n            const acHolderName = holderNameValidationFn(sfState.autoCompleteName) ? sfState.autoCompleteName : null;\n            if (acHolderName) {\n                setFormData('holderName', acHolderName);\n                setFormValid('holderName', true); // only if holderName is valid does this fny get called - so we know it's valid and w/o error\n                setFormErrors('holderName', null);\n            }\n            return;\n        }\n\n        /**\n         * Decide if we can shift focus to the expiryDate field.\n         *\n         * We can if... the config prop, autoFocus, is true AND we have a panLength value from binLookup\n         * AND we are responding to a handleOnFieldValid message about the PAN that says it is valid\n         */\n        if (\n            props.autoFocus &&\n            hasPanLengthRef.current > 0 &&\n            eventDetails?.event === 'handleOnFieldValid' &&\n            eventDetails?.fieldType === ENCRYPTED_CARD_NUMBER &&\n            sfState.valid.encryptedCardNumber\n        ) {\n            doPanAutoJump();\n        }\n\n        /**\n         * Process SFP state\n         */\n        setData({ ...data, ...sfState.data });\n        setErrors({ ...errors, ...sfState.errors });\n        setValid({ ...valid, ...sfState.valid });\n\n        setIsSfpValid(sfState.isSfpValid);\n\n        // Values relating to /binLookup response\n        setCvcPolicy(sfState.cvcPolicy);\n        setShowSocialSecurityNumber(sfState.showSocialSecurityNumber);\n        setExpiryDatePolicy(sfState.expiryDatePolicy);\n    };\n\n    // Farm the handlers for binLookup related functionality out to another 'extensions' file\n    const extensions = useMemo(\n        () =>\n            CIExtensions(\n                props,\n                { sfp },\n                {\n                    dualBrandSelectElements,\n                    setDualBrandSelectElements,\n                    setSelectedBrandValue,\n                    issuingCountryCode,\n                    setIssuingCountryCode\n                },\n                hasPanLengthRef\n            ),\n        [dualBrandSelectElements, issuingCountryCode]\n    );\n\n    /**\n     * EXPOSE METHODS expected by Card.tsx\n     */\n    cardInputRef.current.showValidation = () => {\n        // set flag\n        isValidating.current = true;\n\n        /**\n         * Clear errors prior to validating so that the screenreader will read them *all* again, and in the right order\n         * - only using aria-atomic on the error panel will read them in the wrong order\n         */\n        clearSRPanel?.(); // TODO - recheck if this is still true\n\n        // Validate SecuredFields\n        sfp.current.showValidation();\n\n        // Validate holderName & SSN & KCP (taxNumber) but *not* billingAddress\n        triggerValidation(['holderName', 'socialSecurityNumber', 'taxNumber']);\n\n        // Validate Address\n        if (billingAddressRef?.current) billingAddressRef.current.showValidation();\n    };\n\n    cardInputRef.current.processBinLookupResponse = (binLookupResponse: BinLookupResponse, isReset: boolean) => {\n        extensions.processBinLookup(binLookupResponse, isReset);\n    };\n\n    cardInputRef.current.setStatus = setStatus;\n\n    /**\n     * EFFECT HOOKS\n     */\n    useEffect(() => {\n        // componentDidMount - expose more methods expected by Card.tsx\n        cardInputRef.current.setFocusOn = sfp.current.setFocusOn;\n        cardInputRef.current.updateStyles = sfp.current.updateStyles;\n        cardInputRef.current.handleUnsupportedCard = sfp.current.handleUnsupportedCard;\n\n        // componentWillUnmount\n        return () => {\n            sfp.current.destroy();\n        };\n    }, []);\n\n    /**\n     * Handle form schema updates\n     */\n    useEffect(() => {\n        const newSchema = [\n            ...(props.hasHolderName ? ['holderName'] : []),\n            ...(showBrazilianSSN ? ['socialSecurityNumber'] : []),\n            ...(showKCP ? ['taxNumber'] : []),\n            ...(showBillingAddress ? ['billingAddress'] : [])\n        ];\n        setSchema(newSchema);\n    }, [props.hasHolderName, showBrazilianSSN, showKCP]);\n\n    /**\n     * Handle updates from useForm\n     */\n    useEffect(() => {\n        setData({ ...data, holderName: formData.holderName ?? '', taxNumber: formData.taxNumber });\n\n        setSocialSecurityNumber(formData.socialSecurityNumber);\n\n        if (showBillingAddress) setBillingAddress({ ...formData.billingAddress });\n\n        setValid({\n            ...valid,\n            holderName: props.holderNameRequired ? formValid.holderName : true,\n            // Setting value to false if it's falsy keeps in line with existing, expected behaviour\n            // - but there is an argument to allow 'undefined' as a value to indicate the non-presence of the field\n            socialSecurityNumber: formValid.socialSecurityNumber ? formValid.socialSecurityNumber : false,\n            taxNumber: formValid.taxNumber ? formValid.taxNumber : false,\n            billingAddress: formValid.billingAddress ? formValid.billingAddress : false\n        });\n\n        // Check if billingAddress errors object has any properties that aren't null or undefined\n        const addressHasErrors = formErrors.billingAddress\n            ? Object.entries(formErrors.billingAddress).reduce((acc, [, error]) => acc || error != null, false)\n            : false;\n\n        // Errors\n        setErrors({\n            ...errors,\n            holderName: props.holderNameRequired && !!formErrors.holderName ? formErrors.holderName : null,\n            socialSecurityNumber: showBrazilianSSN && !!formErrors.socialSecurityNumber ? formErrors.socialSecurityNumber : null,\n            taxNumber: showKCP && !!formErrors.taxNumber ? formErrors.taxNumber : null,\n            billingAddress: showBillingAddress && addressHasErrors ? formErrors.billingAddress : null\n        });\n    }, [formData, formValid, formErrors]);\n\n    // Use the custom hook to set (or clear) errors in the SRPanel\n    const {\n        sortedErrorList: currentErrorsSortedByLayout,\n        previousSortedErrors,\n        clearSRPanel\n    } = useSRPanelForCardInputErrors({\n        errors,\n        props,\n        isValidating,\n        retrieveLayout,\n        specifications,\n        billingAddress,\n        sfp\n    });\n\n    // Analytics: ValidationErrors\n    if (currentErrorsSortedByLayout) {\n        const newErrors = getArrayDifferences<SortedErrorObject, string>(currentErrorsSortedByLayout, previousSortedErrors, 'field');\n        newErrors?.forEach(errorItem => {\n            const aObj: FieldErrorAnalyticsObject = {\n                fieldType: errorItem.field,\n                errorCode: errorItem.errorCode\n            };\n\n            props.onValidationErrorAnalytics(aObj);\n        });\n    }\n\n    /**\n     * Main 'componentDidUpdate' handler\n     */\n    useEffect(() => {\n        const holderNameValid: boolean = valid.holderName;\n\n        const sfpValid: boolean = isSfpValid;\n        const addressValid: boolean = showBillingAddress ? valid.billingAddress : true;\n\n        const koreanAuthentication: boolean = showKCP ? !!valid.taxNumber && !!valid.encryptedPassword : true;\n\n        const socialSecurityNumberValid: boolean = showBrazilianSSN ? !!valid.socialSecurityNumber : true;\n\n        const isValid: boolean = sfpValid && holderNameValid && addressValid && koreanAuthentication && socialSecurityNumberValid;\n\n        const sfStateErrorsObj = sfp.current.mapErrorsToValidationRuleResult();\n        const mergedErrors = { ...errors, ...sfStateErrorsObj }; // maps sfErrors AND solves race condition problems for sfp from showValidation\n\n        props.onChange({\n            data,\n            valid,\n            errors: mergedErrors,\n            isValid,\n            billingAddress,\n            selectedBrandValue,\n            storePaymentMethod,\n            socialSecurityNumber,\n            installments\n        });\n    }, [data, valid, errors, selectedBrandValue, storePaymentMethod, installments]);\n\n    /**\n     * RENDER\n     */\n    const FieldToRender = props.storedPaymentMethodId ? StoredCardFieldsWrapper : CardFieldsWrapper;\n\n    return (\n        <Fragment>\n            <SecuredFieldsProvider\n                ref={sfp}\n                {...extractPropsForSFP(props)}\n                styles={{ ...props.styles }}\n                koreanAuthenticationRequired={props.configuration.koreanAuthenticationRequired}\n                hasKoreanFields={!!(props.configuration.koreanAuthenticationRequired && props.countryCode === 'kr')}\n                onChange={handleSecuredFieldsChange}\n                onBrand={props.onBrand}\n                onFocus={handleFocus}\n                type={props.brand}\n                disableIOSArrowKeys={props.disableIOSArrowKeys ? handleTouchstartIOS : null}\n                render={({ setRootNode, setFocusOn }, sfpState) => (\n                    <div\n                        ref={setRootNode}\n                        className={classNames({\n                            'adyen-checkout__card-input': true,\n                            'adyen-checkout-card-input__wrapper': true,\n                            [`adyen-checkout__card-input--${props.fundingSource ?? 'credit'}`]: true,\n                            'adyen-checkout__card-input--loading': status === 'loading'\n                        })}\n                        role={'form'}\n                    >\n                        <FormInstruction />\n\n                        <FieldToRender\n                            // Extract exact props that we need to pass down\n                            {...extractPropsForCardFields(props)}\n                            // Pass on vars created in CardInput:\n                            // Base (shared w. StoredCard)\n                            data={data}\n                            valid={valid}\n                            errors={errors}\n                            handleChangeFor={handleChangeFor}\n                            focusedElement={focusedElement}\n                            setFocusOn={setFocusOn}\n                            sfpState={sfpState}\n                            cvcPolicy={cvcPolicy}\n                            hasInstallments={hasInstallments}\n                            showAmountsInInstallments={showAmountsInInstallments}\n                            handleInstallments={setInstallments}\n                            // For Card\n                            brandsIcons={props.brandsIcons}\n                            formData={formData}\n                            formErrors={formErrors}\n                            formValid={formValid}\n                            expiryDatePolicy={expiryDatePolicy}\n                            dualBrandSelectElements={dualBrandSelectElements}\n                            extensions={extensions}\n                            selectedBrandValue={selectedBrandValue}\n                            // For KCP\n                            showKCP={showKCP}\n                            // For SSN\n                            showBrazilianSSN={showBrazilianSSN}\n                            socialSecurityNumber={socialSecurityNumber}\n                            // For Store details\n                            handleOnStoreDetails={setStorePaymentMethod}\n                            // For Address\n                            setAddressRef={setAddressRef}\n                            billingAddress={billingAddress}\n                            billingAddressValidationRules={partialAddressSchema && getPartialAddressValidationRules(partialAddressCountry.current)}\n                            partialAddressSchema={partialAddressSchema}\n                            handleAddress={handleAddress}\n                            onAddressLookup={props.onAddressLookup}\n                            onAddressSelected={props.onAddressSelected}\n                            addressSearchDebounceMs={props.addressSearchDebounceMs}\n                            //\n                            iOSFocusedField={iOSFocusedField}\n                            //\n                            onFieldFocusAnalytics={onFieldFocusAnalytics}\n                            onFieldBlurAnalytics={onFieldBlurAnalytics}\n                        />\n                    </div>\n                )}\n            />\n            {props.showPayButton &&\n                props.payButton({\n                    status,\n                    variant: props.isPayButtonPrimaryVariant ? 'primary' : 'secondary',\n                    icon: getImage({ imageFolder: 'components/' })(`${PREFIX}lock`)\n                })}\n        </Fragment>\n    );\n};\n\nCardInput.defaultProps = defaultProps;\n\nexport default CardInput;\n"],"names":["CardInput","props","sfp","useRef","isValidating","getImage","useImage","billingAddressRef","setAddressRef","ref","current","cardInputRef","Object","keys","length","setComponentRef","hasPanLengthRef","isAutoJumping","specifications","useMemo","Specifications","status","setStatus","useState","errors","setErrors","valid","setValid","_object_spread","holderNameRequired","holderName","data","setData","hasHolderName","focusedElement","setFocusedElement","isSfpValid","setIsSfpValid","expiryDatePolicy","setExpiryDatePolicy","DATE_POLICY_REQUIRED","cvcPolicy","setCvcPolicy","CVC_POLICY_REQUIRED","issuingCountryCode","setIssuingCountryCode","dualBrandSelectElements","setDualBrandSelectElements","selectedBrandValue","setSelectedBrandValue","storedPaymentMethodId","brand","showBillingAddress","billingAddressMode","AddressModeOptions","none","billingAddressRequired","partialAddressSchema","handlePartialAddressMode","partialAddressCountry","billingAddress","country","storePaymentMethod","setStorePaymentMethod","setBillingAddress","showSocialSecurityNumber","setShowSocialSecurityNumber","socialSecurityNumber","setSocialSecurityNumber","installments","setInstallments","value","iOSFocusedField","setIOSFocusedField","handleChangeFor","triggerValidation","formData","formValid","formErrors","setSchema","setFormData","setFormValid","setFormErrors","useForm","schema","defaultData","formatters","cardInputFormatters","rules","cardInputValidationRules","hasInstallments","installmentOptions","fundingSource","showAmountsInInstallments","showInstallmentAmounts","isKorea","countryCode","showKCP","configuration","koreanAuthenticationRequired","showBrazilianSSN","socialSecurityNumberMode","onFieldFocusAnalytics","who","e","onFocus","fieldType","event","onFieldBlurAnalytics","onBlur","handleFocus","getFocusHandler","retrieveLayout","getLayout","countrySpecificSchemas","getAddressSchemaForCountry","billingAddressRequiredFields","handleTouchstartIOS","useCallback","obj","elementType","name","handleAddress","getAddressHandler","doPanAutoJump","getAutoJumpHandler","extensions","CIExtensions","showValidation","clearSRPanel","processBinLookupResponse","binLookupResponse","isReset","processBinLookup","useEffect","setFocusOn","updateStyles","handleUnsupportedCard","destroy","newSchema","_object_spread_props","taxNumber","addressHasErrors","entries","reduce","acc","error","sortedErrorList","currentErrorsSortedByLayout","previousSortedErrors","useSRPanelForCardInputErrors","newErrors","getArrayDifferences","forEach","errorItem","aObj","field","errorCode","onValidationErrorAnalytics","holderNameValid","sfpValid","addressValid","koreanAuthentication","encryptedPassword","socialSecurityNumberValid","isValid","sfStateErrorsObj","mapErrorsToValidationRuleResult","mergedErrors","onChange","FieldToRender","StoredCardFieldsWrapper","CardFieldsWrapper","h","Fragment","SecuredFieldsProvider","extractPropsForSFP","styles","hasKoreanFields","sfState","eventDetails","autoCompleteName","acHolderName","getRuleByNameAndMode","holderNameValidationFn","autoFocus","ENCRYPTED_CARD_NUMBER","encryptedCardNumber","onBrand","type","disableIOSArrowKeys","render","setRootNode","sfpState","div","className","classNames","role","FormInstruction","extractPropsForCardFields","handleInstallments","brandsIcons","handleOnStoreDetails","billingAddressValidationRules","getPartialAddressValidationRules","onAddressLookup","onAddressSelected","addressSearchDebounceMs","showPayButton","payButton","variant","isPayButtonPrimaryVariant","icon","imageFolder","PREFIX","defaultProps"],"mappings":"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"}