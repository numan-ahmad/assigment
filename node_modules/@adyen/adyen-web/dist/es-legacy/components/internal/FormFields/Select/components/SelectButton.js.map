{"version":3,"file":"SelectButton.js","sources":["../../../../../../../src/components/internal/FormFields/Select/components/SelectButton.tsx"],"sourcesContent":["import { h, Fragment } from 'preact';\nimport cx from 'classnames';\nimport { SelectButtonProps } from '../types';\nimport Img from '../../../Img';\n\nfunction SelectButtonElement({ filterable, toggleButtonRef, ...props }) {\n    if (filterable) {\n        // Even if passed, we can't add an id to this div since it is not allowed to associate a div with a label element\n        const { id, ...strippedProps } = props;\n        return <div {...strippedProps} ref={toggleButtonRef} />;\n    }\n\n    return <button id={props.id} aria-describedby={props.ariaDescribedBy} type={'button'} {...props} ref={toggleButtonRef} />;\n}\n\nfunction SelectButton(props: Readonly<SelectButtonProps>) {\n    const { active, selected, inputText, readonly, showList, required } = props;\n\n    // display fallback order\n    const displayText = selected.selectedOptionName || selected.name || props.placeholder || '';\n    // displayInputText only used for the text input for the filter\n    // display the \"typed\" filter text when showing the dropdown,\n    // hide it and show the \"selected\" value when collapsed\n    const displayInputText = showList ? inputText : displayText;\n\n    const setFocus = (e: Event) => {\n        e.preventDefault();\n        if (document.activeElement === props.filterInputRef.current) {\n            if (!props.showList) {\n                props.toggleList(e);\n            }\n        } else if (props.filterInputRef.current) props.filterInputRef.current.focus();\n    };\n\n    // 1. If readonly we ignore the click action\n    // 2. If filterable we want to show the list and focus on the input\n    // 3. Otherwise we just toggle the list\n    const onClickHandler = readonly ? null : props.filterable ? setFocus : props.toggleList;\n\n    const onFocusHandler = readonly ? null : props.onFocus;\n\n    // check COWEB-1301 [Investigate] Drop-in Accessibility - ADA Compliance questions\n    const currentSelectedItemId = active.id ? `listItem-${active.id}` : '';\n\n    return (\n        <SelectButtonElement\n            className={cx({\n                'adyen-checkout__dropdown__button': true,\n                'adyen-checkout__dropdown__button--readonly': readonly,\n                'adyen-checkout__dropdown__button--active': showList,\n                'adyen-checkout__dropdown__button--invalid': props.isInvalid,\n                'adyen-checkout__dropdown__button--valid': props.isValid,\n                'adyen-checkout__dropdown__button--disabled': selected.disabled\n            })}\n            disabled={props.disabled}\n            filterable={props.filterable}\n            onClick={onClickHandler}\n            onKeyDown={!readonly ? props.onButtonKeyDown : null}\n            toggleButtonRef={props.toggleButtonRef}\n            // Only for some dropdowns e.g. the one found in installments when it is just in the form of a single dropdown, do we want to add an id that links to a label's for attr\n            // If we allow an id to be added to the buttons in CtPCardsList, for example, unit tests start failing because it seems a button with an id no longer has a name property that can be used\n            // as a qualifier in findByRole\n            {...(props.allowIdOnButton && props.id && { id: props.id })}\n        >\n            {!props.filterable ? (\n                <Fragment>\n                    {selected.icon && <Img className=\"adyen-checkout__dropdown__button__icon\" src={selected.icon} alt={selected.name} />}\n                    <span className=\"adyen-checkout__dropdown__button__text\">{displayText}</span>\n                    {selected.secondaryText && <span className=\"adyen-checkout__dropdown__button__secondary-text\">{selected.secondaryText}</span>}\n                </Fragment>\n            ) : (\n                <Fragment>\n                    {!showList && selected.icon && <Img className=\"adyen-checkout__dropdown__button__icon\" src={selected.icon} alt={selected.name} />}\n                    <input\n                        value={displayInputText}\n                        aria-autocomplete=\"list\"\n                        aria-controls={props.selectListId}\n                        aria-expanded={showList}\n                        aria-owns={props.selectListId}\n                        autoComplete=\"off\"\n                        className=\"adyen-checkout__filter-input\"\n                        onInput={props.onInput}\n                        onFocus={onFocusHandler}\n                        ref={props.filterInputRef}\n                        role=\"combobox\"\n                        aria-activedescendant={currentSelectedItemId}\n                        type=\"text\"\n                        readOnly={props.readonly}\n                        id={props.id}\n                        aria-describedby={props.ariaDescribedBy}\n                        required={required}\n                    />\n                    {!showList && selected.secondaryText && (\n                        <span className=\"adyen-checkout__dropdown__button__secondary-text\">{selected.secondaryText}</span>\n                    )}\n                </Fragment>\n            )}\n        </SelectButtonElement>\n    );\n}\n\nexport default SelectButton;\n"],"names":["SelectButtonElement","_param","filterable","toggleButtonRef","props","_object_without_properties","strippedProps","id","h","div","ref","button","aria-describedby","ariaDescribedBy","type","SelectButton","active","selected","inputText","readonly","showList","required","displayText","selectedOptionName","name","placeholder","displayInputText","onClickHandler","e","preventDefault","document","activeElement","filterInputRef","current","toggleList","focus","onFocusHandler","onFocus","currentSelectedItemId","className","cx","isInvalid","isValid","disabled","onClick","onKeyDown","onButtonKeyDown","allowIdOnButton","Fragment","icon","Img","src","alt","input","value","aria-autocomplete","aria-controls","selectListId","aria-expanded","aria-owns","autoComplete","onInput","role","aria-activedescendant","readOnly","secondaryText","span"],"mappings":"61CAKA,SAASA,EAAoBC,GAAA,IAAAC,WAAEA,EAAUC,gBAAEA,GAAdF,EAAkCG,EAAlCC,EAAAJ,EAAA,CAAEC,aAAYC,oBACvC,GAAID,EAAY,CAEZ,MAAeI,EAAkBF,EAAAA,EAAAA,CAAzBG,OACR,OAAOC,EAACC,MAAQH,EAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAeI,IAAKP,IACxC,CAEA,OAAOK,EAACG,SAAAA,EAAAA,EAAAA,CAAOJ,GAAIH,EAAMG,GAAIK,mBAAkBR,EAAMS,gBAAiBC,KAAM,UAAcV,GAAAA,CAAOM,IAAKP,IAC1G,CAEA,SAASY,EAAaX,GAClB,MAAMY,OAAEA,EAAMC,SAAEA,EAAQC,UAAEA,EAASC,SAAEA,EAAQC,SAAEA,EAAQC,SAAEA,GAAajB,EAGhEkB,EAAcL,EAASM,oBAAsBN,EAASO,MAAQpB,EAAMqB,aAAe,GAInFC,EAAmBN,EAAWF,EAAYI,EAc1CK,EAAiBR,EAAW,KAAOf,EAAMF,WAZ7B0B,IACdA,EAAEC,iBACEC,SAASC,gBAAkB3B,EAAM4B,eAAeC,QAC3C7B,EAAMgB,UACPhB,EAAM8B,WAAWN,GAEdxB,EAAM4B,eAAeC,SAAS7B,EAAM4B,eAAeC,QAAQE,OAAK,EAMR/B,EAAM8B,WAEvEE,EAAiBjB,EAAW,KAAOf,EAAMiC,QAGzCC,EAAwBtB,EAAOT,GAAK,YAAYS,EAAOT,KAAO,GAEpE,OACIC,EAACR,EAAAA,EAAAA,CACGuC,UAAWC,EAAG,CACV,oCAAoC,EACpC,6CAA8CrB,EAC9C,2CAA4CC,EAC5C,4CAA6ChB,EAAMqC,UACnD,0CAA2CrC,EAAMsC,QACjD,6CAA8CzB,EAAS0B,WAE3DA,SAAUvC,EAAMuC,SAChBzC,WAAYE,EAAMF,WAClB0C,QAASjB,EACTkB,UAAY1B,EAAmC,KAAxBf,EAAM0C,gBAC7B3C,gBAAiBC,EAAMD,iBAIlBC,EAAM2C,iBAAmB3C,EAAMG,IAAM,CAAEA,GAAIH,EAAMG,KAEpDH,EAAMF,WAOJM,EAACwC,EAAAA,MACK5B,GAAYH,EAASgC,MAAQzC,EAAC0C,EAAAA,CAAIX,UAAU,yCAAyCY,IAAKlC,EAASgC,KAAMG,IAAKnC,EAASO,OACzHhB,EAAC6C,QAAAA,CACGC,MAAO5B,EACP6B,oBAAkB,OAClBC,gBAAepD,EAAMqD,aACrBC,gBAAetC,EACfuC,YAAWvD,EAAMqD,aACjBG,aAAa,MACbrB,UAAU,+BACVsB,QAASzD,EAAMyD,QACfxB,QAASD,EACT1B,IAAKN,EAAM4B,eACX8B,KAAK,WACLC,wBAAuBzB,EACvBxB,KAAK,OACLkD,SAAU5D,EAAMe,SAChBZ,GAAIH,EAAMG,GACVK,mBAAkBR,EAAMS,gBACxBQ,SAAUA,KAEZD,GAAYH,EAASgD,eACnBzD,EAAC0D,OAAAA,CAAK3B,UAAU,oDAAoDtB,EAASgD,gBA5BrFzD,EAACwC,EACI/B,KAAAA,EAASgC,MAAQzC,EAAC0C,EAAAA,CAAIX,UAAU,yCAAyCY,IAAKlC,EAASgC,KAAMG,IAAKnC,EAASO,OAC5GhB,EAAC0D,OAAAA,CAAK3B,UAAU,0CAA0CjB,GACzDL,EAASgD,eAAiBzD,EAAC0D,OAAAA,CAAK3B,UAAU,oDAAoDtB,EAASgD,gBA+B5H"}