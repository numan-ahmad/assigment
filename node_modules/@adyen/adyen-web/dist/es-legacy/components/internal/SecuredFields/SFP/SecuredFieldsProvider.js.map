{"version":3,"file":"SecuredFieldsProvider.js","sources":["../../../../../../src/components/internal/SecuredFields/SFP/SecuredFieldsProvider.ts"],"sourcesContent":["import { Component } from 'preact';\nimport { getErrorObject, getFields, getErrorReducer, validFieldsReducer } from './SFPUtils';\nimport initCSF from '../lib/CSF';\nimport handlers from './SecuredFieldsProviderHandlers';\nimport defaultProps from './defaultProps';\nimport { SFPProps, SFPState, SingleBrandResetObject } from './types';\nimport {\n    StylesObject,\n    CbObjOnError,\n    CbObjOnFocus,\n    CbObjOnBrand,\n    CbObjOnAllValid,\n    CbObjOnFieldValid,\n    CbObjOnAutoComplete,\n    CbObjOnConfigSuccess,\n    CbObjOnLoad,\n    SFKeyPressObj\n} from '../lib/types';\nimport { CSFReturnObject, CSFSetupObject } from '../lib/CSF/types';\nimport { CVC_POLICY_REQUIRED, DATE_POLICY_REQUIRED, DEDICATED_CARD_COMPONENTS, ENCRYPTED_CARD_NUMBER, ENCRYPTED_PWD_FIELD } from '../lib/constants';\nimport { BinLookupResponse } from '../../../Card/types';\nimport AdyenCheckoutError from '../../../../core/Errors/AdyenCheckoutError';\nimport { SFStateErrorObj } from '../../../Card/components/CardInput/types';\nimport { getErrorMessageFromCode } from '../../../../core/Errors/utils';\nimport { SF_ErrorCodes } from '../../../../core/Errors/constants';\n\n/**\n * SecuredFieldsProvider:\n * Initialises & handles the client-side part of SecuredFields\n */\nclass SecuredFieldsProvider extends Component<SFPProps, SFPState> {\n    private csfLoadFailTimeout: number;\n    private csfLoadFailTimeoutMS: number;\n    private csfConfigFailTimeout: number;\n    private csfConfigFailTimeoutMS: number;\n    private numCharsInField: object;\n    private rootNode;\n    private numDateFields: number;\n    private csf: CSFReturnObject;\n    private handleOnLoad: (obj: CbObjOnLoad) => void;\n    private handleOnConfigSuccess: (obj: CbObjOnConfigSuccess) => void;\n    private handleOnFieldValid: (obj: CbObjOnFieldValid) => void;\n    private handleOnAllValid: (obj: CbObjOnAllValid) => void;\n    private handleOnBrand: (obj: CbObjOnBrand) => void;\n    private handleFocus: (obj: CbObjOnFocus) => void;\n    private handleOnError: (obj: CbObjOnError, hasUnsupportedCard?: boolean) => void;\n    private handleOnAutoComplete: (obj: CbObjOnAutoComplete) => void;\n    private handleOnNoDataRequired: () => void;\n    private handleOnTouchstartIOS: (obj) => void;\n    private handleKeyPressed: (obj: SFKeyPressObj) => void;\n    public state: SFPState;\n    public props;\n    private issuingCountryCode;\n\n    constructor(props: SFPProps) {\n        super(props);\n\n        const stateObj: SFPState = {\n            status: 'loading',\n            brand: props.type,\n            errors: {},\n            valid: {},\n            data: {},\n            cvcPolicy: CVC_POLICY_REQUIRED,\n            expiryDatePolicy: DATE_POLICY_REQUIRED,\n            isSfpValid: false,\n            hasKoreanFields: props.hasKoreanFields\n        };\n        this.state = stateObj;\n\n        this.csfLoadFailTimeout = null;\n        this.csfLoadFailTimeoutMS = 30000;\n\n        this.csfConfigFailTimeout = null;\n        this.csfConfigFailTimeoutMS = 15000;\n\n        this.numCharsInField = {};\n\n        // Handlers\n        this.handleOnLoad = handlers.handleOnLoad.bind(this);\n        this.handleOnConfigSuccess = handlers.handleOnConfigSuccess.bind(this);\n        this.handleOnFieldValid = handlers.handleOnFieldValid.bind(this);\n        this.handleOnAllValid = handlers.handleOnAllValid.bind(this);\n        this.handleOnBrand = handlers.handleOnBrand.bind(this);\n        this.handleFocus = handlers.handleFocus.bind(this);\n        this.handleOnError = handlers.handleOnError.bind(this);\n        this.handleOnNoDataRequired = handlers.handleOnNoDataRequired.bind(this);\n        this.handleOnAutoComplete = handlers.handleOnAutoComplete.bind(this);\n        this.handleOnTouchstartIOS = handlers.handleOnTouchstartIOS.bind(this); // Only called when iOS detected\n        this.handleKeyPressed = handlers.handleKeyPressed.bind(this);\n\n        this.processBinLookupResponse = this.processBinLookupResponse.bind(this);\n\n        // Bindings for functions exposed to users of this component: SecuredFields & CardInput\n        this.setFocusOn = this.setFocusOn.bind(this);\n        this.updateStyles = this.updateStyles.bind(this);\n        this.handleUnsupportedCard = this.handleUnsupportedCard.bind(this);\n        this.showValidation = this.showValidation.bind(this);\n        this.destroy = this.destroy.bind(this);\n    }\n\n    public static defaultProps = defaultProps;\n\n    public componentDidMount(): void {\n        // When SFP instantiated through SecuredFieldsInput c.f. CardInput\n        if (this.props.rootNode) {\n            this.setRootNode(this.props.rootNode);\n        }\n\n        // Find encryptedFields and map them to the values we use to store valid states\n        const fields = getFields(this.rootNode);\n        const valid = fields.reduce(validFieldsReducer, {});\n\n        this.setState({ valid });\n\n        // Populate numCharsInField object\n        fields.forEach(field => {\n            this.numCharsInField[field] = 0;\n        });\n\n        // Store how many dateFields we are dealing with visually\n        this.numDateFields = fields.filter(f => f.match(/Expiry/)).length;\n\n        if (fields.length) {\n            this.destroy(); // TODO test if this solves the React double render problem.\n            this.initializeCSF(this.rootNode);\n        } else {\n            this.handleOnNoDataRequired();\n        }\n    }\n\n    public componentDidUpdate() {\n        this.checkForKCPFields();\n    }\n\n    public componentWillUnmount(): void {\n        this.csf = null;\n        clearTimeout(this.csfLoadFailTimeout);\n        clearTimeout(this.csfConfigFailTimeout);\n    }\n\n    private initializeCSF(root: HTMLElement): void {\n        let loadingContext = this.props.loadingContext;\n\n        // For loading securedFields from local server during development\n        if (process.env.NODE_ENV === 'development' && process.env.__SF_ENV__ !== 'build') {\n            loadingContext = process.env.__SF_ENV__;\n        }\n\n        // TODO\n        // if(!this.props.keypadFix){\n        // send analytics action because to know if anyone *ever* sets this config prop\n        // }\n\n        const csfSetupObj: CSFSetupObject = {\n            rootNode: root,\n            type: this.props.type,\n            clientKey: this.props.clientKey,\n            cardGroupTypes: this.props.brands,\n            autoFocus: this.props.autoFocus,\n            trimTrailingSeparator: this.props.trimTrailingSeparator,\n            loadingContext,\n            keypadFix: this.props.keypadFix,\n            showWarnings: this.props.showWarnings,\n            iframeUIConfig: {\n                sfStyles: this.props.styles\n            },\n            i18n: this.props.i18n,\n            callbacks: {\n                onLoad: this.handleOnLoad,\n                onConfigSuccess: this.handleOnConfigSuccess,\n                onFieldValid: this.handleOnFieldValid,\n                onAllValid: this.handleOnAllValid,\n                onBrand: this.handleOnBrand,\n                onError: this.handleOnError,\n                onFocus: this.handleFocus,\n                onBinValue: this.props.onBinValue,\n                onAutoComplete: this.handleOnAutoComplete,\n                onAdditionalSFConfig: this.props.onAdditionalSFConfig,\n                onAdditionalSFRemoved: this.props.onAdditionalSFRemoved,\n                onTouchstartIOS: this.handleOnTouchstartIOS,\n                onKeyPressed: this.handleKeyPressed\n            },\n            isKCP: this.state.hasKoreanFields,\n            legacyInputMode: this.props.legacyInputMode,\n            minimumExpiryDate: this.props.minimumExpiryDate,\n            implementationType: this.props.implementationType || 'components', // to distinguish between 'regular' and 'custom' card component\n            forceCompat: this.props.forceCompat,\n            maskSecurityCode: this.props.maskSecurityCode,\n            exposeExpiryDate: this.props.exposeExpiryDate,\n            shouldDisableIOSArrowKeys: !!this.props.disableIOSArrowKeys, // convert whether function has been defined into a boolean\n            placeholders: this.props.placeholders ?? {},\n            showContextualElement: this.props.showContextualElement\n        };\n\n        this.csf = initCSF(csfSetupObj);\n\n        /**\n         * Expect to at least have had the handleOnLoad callback called within this time\n         * - if this hasn't happened then something has happened to interrupt the loading of the securedFields\n         * So we need to clear the loading spinner to see if the securedFields are reporting anything\n         */\n        // @ts-ignore - timout 'type' is a number\n        this.csfLoadFailTimeout = setTimeout(() => {\n            if (this.state.status !== 'ready') {\n                // Hide the spinner\n                this.setState({ status: 'csfLoadFailure' });\n                // Report the error\n                this.props.onError(new AdyenCheckoutError('ERROR', 'secured field iframes have failed to load'));\n            }\n        }, this.csfLoadFailTimeoutMS);\n    }\n\n    private checkForKCPFields() {\n        let needsKoreanFields = false;\n        if (this.props.koreanAuthenticationRequired) {\n            needsKoreanFields = this.issuingCountryCode ? this.issuingCountryCode === 'kr' : this.props.countryCode === 'kr';\n        }\n\n        // Was korean, now isn't - hide password field\n        if (this.state.hasKoreanFields && !needsKoreanFields) {\n            // Clear any stored data\n            const setRemovedFieldState = prevState => ({\n                data: { ...prevState.data, [ENCRYPTED_PWD_FIELD]: undefined },\n                valid: { ...prevState.valid, [ENCRYPTED_PWD_FIELD]: false },\n                errors: { ...prevState.errors, [ENCRYPTED_PWD_FIELD]: false },\n                hasKoreanFields: false\n            });\n\n            this.setState(setRemovedFieldState, () => {\n                this.props.onChange(this.state);\n            });\n\n            this.csf.removeSecuredField(ENCRYPTED_PWD_FIELD);\n            this.csf.setKCPStatus(false);\n        }\n\n        // Wasn't korean, now is - show password field\n        if (!this.state.hasKoreanFields && needsKoreanFields) {\n            const setAddedFieldState = prevState => ({\n                valid: { ...prevState.valid, [ENCRYPTED_PWD_FIELD]: false },\n                hasKoreanFields: true,\n                isSfpValid: false\n            });\n\n            this.setState(setAddedFieldState, () => {\n                this.props.onChange(this.state);\n            });\n\n            this.csf.addSecuredField(ENCRYPTED_PWD_FIELD);\n            this.csf.setKCPStatus(true);\n        }\n    }\n\n    public getChildContext(): object {\n        return { i18n: this.props.i18n };\n    }\n\n    public handleUnsupportedCard(errObj: CbObjOnError): boolean {\n        const hasUnsupportedCard = !!errObj.error;\n\n        // Store the brand(s) we detected and which we don't support\n        if (hasUnsupportedCard) {\n            this.setState({ detectedUnsupportedBrands: errObj.detectedBrands });\n        }\n\n        errObj.rootNode = this.rootNode; // Needed for CustomCard\n        this.handleOnError(errObj, hasUnsupportedCard);\n        // Inform CSF that the number field has an unsupportedCard error (or that it has been cleared)\n        if (this.csf) {\n            this.csf.hasUnsupportedCard(ENCRYPTED_CARD_NUMBER, errObj.error);\n        }\n        return hasUnsupportedCard;\n    }\n\n    public setFocusOn(frame: string): void {\n        if (this.csf) this.csf.setFocusOnFrame(frame);\n    }\n\n    public updateStyles(stylesObj: StylesObject): void {\n        if (this.csf) this.csf.updateStyles(stylesObj);\n    }\n\n    public sfIsOptionalOrHidden(fieldType: string): boolean {\n        return this.csf.sfIsOptionalOrHidden(fieldType);\n    }\n\n    public destroy(): void {\n        if (this.csf) this.csf.destroy();\n    }\n\n    public showValidation(): void {\n        const { numDateFields, state }: SecuredFieldsProvider = this;\n\n        Object.keys(state.valid)\n            .reduce(getErrorReducer(numDateFields, state), [])\n            .forEach(field => {\n                // For each detected error pass an error object to the handler (calls error callback & sets state)\n                const errorObj: CbObjOnError = getErrorObject(field, this.rootNode, state);\n                this.handleOnError(errorObj, !!state.detectedUnsupportedBrands);\n                // Inform the secured-fields instance of which fields have been found to have errors\n                if (this.csf && this.csf.isValidated) {\n                    this.csf.isValidated(field, errorObj.error);\n                }\n            });\n    }\n\n    /**\n     * Map SF errors to ValidationRuleResult-like objects, for CardInput component\n     */\n    public mapErrorsToValidationRuleResult(): SFStateErrorObj {\n        const fieldNames: string[] = Object.keys(this.state.errors);\n\n        const sfStateErrorsObj = fieldNames.reduce((acc, fieldName) => {\n            const errorCode = this.state.errors[fieldName];\n            if (errorCode) {\n                acc[fieldName] = {\n                    isValid: false,\n                    errorMessage: getErrorMessageFromCode(errorCode, SF_ErrorCodes), // this is the human-readable, untranslated, explanation of the error that will exist on the error object in card.state.errors\n                    // For v5 the object found in state.errors should also contain the additional properties that used to be sent to the onError callback\n                    // namely: translation, errorCode, a ref to rootNode &, in the case of failed binLookup, an array of the detectedBrands\n                    errorI18n: this.props.i18n.get(errorCode),\n                    error: errorCode,\n                    rootNode: this.rootNode,\n                    ...(this.state.detectedUnsupportedBrands && { detectedBrands: this.state.detectedUnsupportedBrands })\n                };\n            } else {\n                acc[fieldName] = null;\n            }\n            return acc;\n        }, {});\n        return sfStateErrorsObj;\n    }\n\n    public processBinLookupResponse(binLookupResponse: BinLookupResponse, resetObject: SingleBrandResetObject): void {\n        // If we were dealing with an unsupported card & now we have a valid /binLookup response (or a response triggering a reset of the UI),\n        // - reset state to clear the error & the stored unsupportedBrands and, in the case of a valid /binLookup response, inform CSF (via handleUnsupportedCard)\n        // (Scenario: from an unsupportedCard state the shopper has pasted another number long enough to trigger a /binLookup)\n        if (this.state.detectedUnsupportedBrands) {\n            this.setState(prevState => ({\n                errors: { ...prevState.errors, [ENCRYPTED_CARD_NUMBER]: false },\n                detectedUnsupportedBrands: null\n            }));\n\n            // If we have some sort of binLookupResponse object then this isn't the reset caused by digits dropping below a threshold\n            // - so call handleUnsupportedCard to clear the error\n            if (this.csf && binLookupResponse) {\n                const errObj: CbObjOnError = {\n                    type: 'card',\n                    fieldType: 'encryptedCardNumber',\n                    error: ''\n                };\n                this.handleUnsupportedCard(errObj);\n            }\n        }\n\n        this.issuingCountryCode = binLookupResponse?.issuingCountryCode?.toLowerCase();\n\n        const hasBrandedResetObj = resetObject?.brand;\n\n        /**\n         * Are we dealing with a \"dedicated\" card scenario i.e a card component created as: checkout.create('bcmc') but which can accept multiple brands\n         * - in which case we will need to reset brand and pass on the resetObj to CSF\n         */\n        const mustResetDedicatedBrand = hasBrandedResetObj && DEDICATED_CARD_COMPONENTS.includes(resetObject.brand);\n\n        if (mustResetDedicatedBrand) {\n            // resetObject.brand will be the value of the brand whose logo we want to reshow in the UI\n            this.setState(resetObject, () => {\n                this.props.onChange(this.state);\n            });\n        }\n\n        /**\n         * Scenarios:\n         *\n         * - RESET (binLookupResponse === null): The number of digits in number field has dropped below threshold for BIN lookup\n         * - RESULT (binLookupResponse.supportedBrands.length === 1): binLookup has found a result so inform CSF\n         *\n         * In the RESET scenario, for \"dedicated\" card components we also need to pass on the resetObject since this contains information about\n         * the brand that CSF needs to reset to, internally.\n         */\n        if (this.csf) this.csf.brandsFromBinLookup(binLookupResponse, mustResetDedicatedBrand ? resetObject : null);\n    }\n\n    private setRootNode = (input: HTMLElement): void => {\n        this.rootNode = input;\n    };\n\n    public render(props, state) {\n        return props.render({ setRootNode: this.setRootNode, setFocusOn: this.setFocusOn }, state);\n    }\n}\n\nexport default SecuredFieldsProvider;\n"],"names":["SecuredFieldsProvider","Component","componentDidMount","this","props","rootNode","setRootNode","fields","getFields","valid","reduce","validFieldsReducer","setState","forEach","field","numCharsInField","numDateFields","filter","f","match","length","destroy","initializeCSF","handleOnNoDataRequired","componentDidUpdate","checkForKCPFields","componentWillUnmount","csf","clearTimeout","csfLoadFailTimeout","csfConfigFailTimeout","root","loadingContext","_this_props_placeholders","csfSetupObj","type","clientKey","cardGroupTypes","brands","autoFocus","trimTrailingSeparator","keypadFix","showWarnings","iframeUIConfig","sfStyles","styles","i18n","callbacks","onLoad","handleOnLoad","onConfigSuccess","handleOnConfigSuccess","onFieldValid","handleOnFieldValid","onAllValid","handleOnAllValid","onBrand","handleOnBrand","onError","handleOnError","onFocus","handleFocus","onBinValue","onAutoComplete","handleOnAutoComplete","onAdditionalSFConfig","onAdditionalSFRemoved","onTouchstartIOS","handleOnTouchstartIOS","onKeyPressed","handleKeyPressed","isKCP","state","hasKoreanFields","legacyInputMode","minimumExpiryDate","implementationType","forceCompat","maskSecurityCode","exposeExpiryDate","shouldDisableIOSArrowKeys","disableIOSArrowKeys","placeholders","showContextualElement","initCSF","setTimeout","status","AdyenCheckoutError","csfLoadFailTimeoutMS","needsKoreanFields","koreanAuthenticationRequired","issuingCountryCode","countryCode","setRemovedFieldState","prevState","data","_object_spread_props","_object_spread","ENCRYPTED_PWD_FIELD","undefined","errors","onChange","removeSecuredField","setKCPStatus","setAddedFieldState","isSfpValid","addSecuredField","getChildContext","handleUnsupportedCard","errObj","hasUnsupportedCard","error","detectedUnsupportedBrands","detectedBrands","ENCRYPTED_CARD_NUMBER","setFocusOn","frame","setFocusOnFrame","updateStyles","stylesObj","sfIsOptionalOrHidden","fieldType","showValidation","Object","keys","getErrorReducer","errorObj","getErrorObject","isValidated","mapErrorsToValidationRuleResult","acc","fieldName","errorCode","isValid","errorMessage","getErrorMessageFromCode","SF_ErrorCodes","errorI18n","get","processBinLookupResponse","binLookupResponse","resetObject","toLowerCase","mustResetDedicatedBrand","brand","DEDICATED_CARD_COMPONENTS","includes","brandsFromBinLookup","render","constructor","super","_define_property","csfConfigFailTimeoutMS","input","stateObj","cvcPolicy","CVC_POLICY_REQUIRED","expiryDatePolicy","DATE_POLICY_REQUIRED","handlers","bind","defaultProps"],"mappings":"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"}