{"version":3,"file":"Ach.js","sources":["../../../../src/components/Ach/Ach.tsx"],"sourcesContent":["import { h } from 'preact';\nimport UIElement from '../internal/UIElement/UIElement';\nimport AchInput from './components/AchInput';\nimport { CoreProvider } from '../../core/Context/CoreProvider';\nimport RedirectButton from '../internal/RedirectButton';\nimport { AchConfiguration } from './types';\nimport { TxVariants } from '../tx-variants';\n\nexport class AchElement extends UIElement<AchConfiguration> {\n    public static type = TxVariants.ach;\n\n    formatProps(props: AchConfiguration) {\n        return {\n            ...props,\n            // Fix mismatch between passed hasHolderName & holderNameRequired props\n            // (when holderNameRequired = true, but hasHolderName = false - which means component will never be valid)\n            holderNameRequired: props.hasHolderName ?? props.holderNameRequired\n            // TODO - if it turns out that hasHolderName & holderNameRequired are not configurable by the merchant\n            //  then we will need to force these properties to true\n        };\n    }\n\n    /**\n     * Formats the component data output\n     */\n    formatData() {\n        const recurringPayment = !!this.props.storedPaymentMethodId;\n\n        // Map holderName to ownerName\n        const paymentMethod = {\n            type: AchElement.type,\n            ...this.state.data,\n            ownerName: this.state.data?.holderName,\n            ...(recurringPayment && { storedPaymentMethodId: this.props.storedPaymentMethodId })\n        };\n\n        delete paymentMethod.holderName;\n\n        return {\n            paymentMethod,\n            ...(this.state.storePaymentMethod && { storePaymentMethod: this.state.storePaymentMethod })\n        };\n    }\n\n    updateStyles(stylesObj) {\n        if (this.componentRef && this.componentRef.updateStyles) this.componentRef.updateStyles(stylesObj);\n        return this;\n    }\n\n    setFocusOn(fieldName) {\n        if (this.componentRef && this.componentRef.setFocusOn) this.componentRef.setFocusOn(fieldName);\n        return this;\n    }\n\n    get isValid() {\n        if (this.props.storedPaymentMethodId) {\n            return true;\n        }\n\n        return !!this.state.isValid;\n    }\n\n    get displayName() {\n        if (this.props.storedPaymentMethodId && this.props.bankAccountNumber) {\n            // get lastFour from bankAccountNumber, value comes from storedPaymentMethods\n            return `•••• ${this.props.bankAccountNumber.slice(-4)}`;\n        }\n        return this.props.name;\n    }\n\n    get additionalInfo() {\n        return this.props.storedPaymentMethodId ? this.props.i18n.get('ach.savedBankAccount') : '';\n    }\n\n    render() {\n        return (\n            <CoreProvider i18n={this.props.i18n} loadingContext={this.props.loadingContext} resources={this.resources}>\n                {this.props.storedPaymentMethodId ? (\n                    <RedirectButton\n                        showPayButton={this.props.showPayButton}\n                        name={this.displayName}\n                        amount={this.props.amount}\n                        payButton={this.payButton}\n                        onSubmit={this.submit}\n                        ref={ref => {\n                            this.componentRef = ref;\n                        }}\n                    />\n                ) : (\n                    <AchInput\n                        setComponentRef={this.setComponentRef}\n                        handleKeyPress={this.handleKeyPress}\n                        {...this.props}\n                        onChange={this.setState}\n                        onSubmit={this.submit}\n                        payButton={this.payButton}\n                        resources={this.resources}\n                    />\n                )}\n            </CoreProvider>\n        );\n    }\n}\n\nexport default AchElement;\n"],"names":["AchElement","UIElement","formatProps","props","_object_spread_props","holderNameRequired","hasHolderName","formatData","_this_state_data","recurringPayment","this","storedPaymentMethodId","paymentMethod","_object_spread","type","state","data","ownerName","holderName","storePaymentMethod","updateStyles","stylesObj","componentRef","setFocusOn","fieldName","isValid","displayName","bankAccountNumber","slice","name","additionalInfo","i18n","get","render","h","CoreProvider","loadingContext","resources","RedirectButton","showPayButton","amount","payButton","onSubmit","submit","ref","AchInput","setComponentRef","handleKeyPress","onChange","setState","_define_property","TxVariants","ach"],"mappings":"ipCAQO,MAAMA,UAAmBC,EAG5BC,WAAAA,CAAYC,GAKgBA,IAAAA,EAJxB,OAAOC,EACAD,EAAAA,CAAAA,EAAAA,GAAAA,CAGHE,2BAAoBF,EAAAA,EAAMG,qBAANH,IAAAA,EAAAA,EAAuBA,EAAME,oBAIzD,CAKAE,UAAAA,GAOmB,IAAAC,EANf,MAAMC,IAAqBC,KAAKP,MAAMQ,sBAGhCC,EAAgBC,EAAAT,EAAAS,EAAA,CAClBC,KAAMd,EAAWc,MACdJ,KAAKK,MAAMC,MAAI,CAClBC,UAA0B,QAAfT,EAAAE,KAAKK,MAAMC,YAAX,IAAAR,OAAA,EAAAA,EAAiBU,aACxBT,GAAoB,CAAEE,sBAAuBD,KAAKP,MAAMQ,wBAKhE,cAFOC,EAAcM,WAEdL,EAAA,CACHD,iBACIF,KAAKK,MAAMI,oBAAsB,CAAEA,mBAAoBT,KAAKK,MAAMI,oBAE9E,CAEAC,YAAAA,CAAaC,GAET,OADIX,KAAKY,cAAgBZ,KAAKY,aAAaF,cAAcV,KAAKY,aAAaF,aAAaC,GACjFX,IACX,CAEAa,UAAAA,CAAWC,GAEP,OADId,KAAKY,cAAgBZ,KAAKY,aAAaC,YAAYb,KAAKY,aAAaC,WAAWC,GAC7Ed,IACX,CAEA,WAAIe,GACA,QAAIf,KAAKP,MAAMQ,yBAIND,KAAKK,MAAMU,OACxB,CAEA,eAAIC,GACA,OAAIhB,KAAKP,MAAMQ,uBAAyBD,KAAKP,MAAMwB,kBAExC,QAAQjB,KAAKP,MAAMwB,kBAAkBC,OAAO,KAEhDlB,KAAKP,MAAM0B,IACtB,CAEA,kBAAIC,GACA,OAAOpB,KAAKP,MAAMQ,sBAAwBD,KAAKP,MAAM4B,KAAKC,IAAI,wBAA0B,EAC5F,CAEAC,MAAAA,GACI,OACIC,EAACC,EAAAA,CAAaJ,KAAMrB,KAAKP,MAAM4B,KAAMK,eAAgB1B,KAAKP,MAAMiC,eAAgBC,UAAW3B,KAAK2B,WAC3F3B,KAAKP,MAAMQ,sBACRuB,EAACI,EAAAA,CACGC,cAAe7B,KAAKP,MAAMoC,cAC1BV,KAAMnB,KAAKgB,YACXc,OAAQ9B,KAAKP,MAAMqC,OACnBC,UAAW/B,KAAK+B,UAChBC,SAAUhC,KAAKiC,OACfC,IAAKA,IACDlC,KAAKY,aAAesB,CAAAA,IAI5BV,EAACW,EAAAA,EAAAA,EAAAA,CACGC,gBAAiBpC,KAAKoC,gBACtBC,eAAgBrC,KAAKqC,gBACjBrC,KAAKP,OAAK,CACd6C,SAAUtC,KAAKuC,SACfP,SAAUhC,KAAKiC,OACfF,UAAW/B,KAAK+B,UAChBJ,UAAW3B,KAAK2B,aAKpC,EA5FAa,EADSlD,EACKc,OAAOqC,EAAWC"}